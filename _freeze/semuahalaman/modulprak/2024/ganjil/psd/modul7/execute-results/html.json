{
  "hash": "e7169d9715d4e9bb3e33c1423916b304",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"(Pertemuan 07) Distribusi Sampling di R\"\nsubtitle: \"Sampling Distributions in R\"\ndescription: \"Offline di Departemen Matematika\"\ndate: 11/04/2024\npage-navigation: true\nformat: html\n---\n\n\nKembali ke [Pengantar Sains Data](./psd2024.qmd)\n\nDistribusi dari suatu statistik disebut ***sampling distribution*** atau **distribusi *sampling***.\n\nContoh: distribusi dari rata-rata disebut distribusi *sample mean*. (Rata-rata termasuk statistik)\n\n# Distribusi *Sample Mean*\n\n## Dengan melakukan simulasi\n\nMisalkan kita punya suatu distribusi *uniform* (kontinu)\n\nAkan dilakukan *sampling* dari distribusi tersebut\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunif1 <- c(1:8)\nunif1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6 7 8\n```\n\n\n:::\n:::\n\n\nLihat sebarannya\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(unif1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(unif1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.44949\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(unif1, main = \"Uniform Distribution\", xlab = \" \")\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nMisal diambil berbagai ukuran sampel dengan pengembalian\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(211)\n```\n:::\n\n\nSample size 3, 1000 kali percobaan\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor(i in 1:1000){\n  sample_means[i] <- mean(sample(8, 3, replace = T))\n}\nhist(sample_means, xlim = c(0,8), main = \"Sample Size of 3\", xlab = \"Sample Means\")\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nSample size 10, 1000 kali percobaan\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor(i in 1:1000){\n  sample_means[i] <- mean(sample(8, 10, replace = T))\n}\nhist(sample_means, xlim = c(0,8), main = \"Sample Size of 10\", xlab = \"Sample Means\")\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nSample size 50, 1000 kali percobaan\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor(i in 1:1000){\n  sample_means[i] <- mean(sample(8, 50, replace = TRUE))\n}\nhist(sample_means, xlim = c(0,8), main = \"Sample Size of 50\", xlab = \"Sample Means\")\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nJika dilihat berdasarkan histogram dari ketiga sampling tadi, bisa terlihat bahwa semakin besar ukuran sampelnya, maka distribusi *sample mean* akan semakin mendekati distribusi normal\n\n## Dengan melihat semua kemungkinan\n\nDaripada melakukan simualsi yang mengandalkan *random*, untuk ukuran sampel yang cukup kecil, kita bisa saja melihat semua kemungkinan pengambilan sampel, menghitung statistiknya (misalnya di sini statistik rata-rata), lalu mmenghitung probabilitasnya, untuk memperoleh distribusi *sampling* untuk statistik tersebut (misalnya di sini distribusi *sample mean*) secara eksak.\n\nMari kita coba untuk distribusi diskrit berhingga, yang misalnya bisa kita buat sendiri, memanfaatkan  *package* `distr` yang sudah kita kenal sebelumnya.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"distr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: startupmsg\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUtilities for Start-Up Messages (version 0.9.7)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFor more information see ?\"startupmsg\", NEWS(\"startupmsg\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: sfsmisc\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nObject Oriented Implementation of Distributions (version 2.9.2)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAttention: Arithmetics on distribution objects are understood as operations on corresponding random variables (r.v.s); see distrARITH().\nSome functions from package 'stats' are intentionally masked ---see distrMASK().\nNote that global options are controlled by distroptions() ---c.f. ?\"distroptions\".\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFor more information see ?\"distr\", NEWS(\"distr\"), as well as\n  http://distr.r-forge.r-project.org/\nPackage \"distrDoc\" provides a vignette to this package as well as to several extension packages; try vignette(\"distr\").\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'distr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    df, qqplot, sd\n```\n\n\n:::\n:::\n\n\nKita akan meninjau semua kemungkinan pengambilan dua sampel dengan pengembalian. Untuk itu, kita memerlukan *package* `gtools` yang menyediakan fungsi-fungsi kombinatorik seperti `permutations` dan `combinations` untuk memperoleh semua kemungkinan seperti itu\n\n```\ninstall.packages(\"gtools\")\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"gtools\")\n```\n:::\n\n\nMisalkan kita punya distribusi diskrit sebagai berikut:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupp1 <- c(0, 1, 2, 3)\nprob1 <- c(1/4, 1/4, 1/4, 1/4)\ndist1 <- DiscreteDistribution(supp = supp1,\n                              prob = prob1)\nplot(dist1)\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n(Sebenarnya `dist1` juga bisa berupa distribusi Bernoulli, binomial, ataupun distribusi diskrit lainnya.)\n\nKita bisa menghasilkan semua kemungkinan sampel berukuran 2 dengan pengembalian, menggunakan fungsi `permutations` dari *package* `gtools`, sebagai berikut:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat1 <- permutations(n = length(support(dist1)),\n                     r = 2, # ukuran sampel\n                     v = support(dist1),\n                     repeats.allowed = TRUE)\nmat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1] [,2]\n [1,]    0    0\n [2,]    0    1\n [3,]    0    2\n [4,]    0    3\n [5,]    1    0\n [6,]    1    1\n [7,]    1    2\n [8,]    1    3\n [9,]    2    0\n[10,]    2    1\n[11,]    2    2\n[12,]    2    3\n[13,]    3    0\n[14,]    3    1\n[15,]    3    2\n[16,]    3    3\n```\n\n\n:::\n:::\n\n\nHasilnya berupa matriks, yang bisa kita ubah jadi *data frame*,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_perm1 <- data.frame(mat1)\ndf_perm1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   X1 X2\n1   0  0\n2   0  1\n3   0  2\n4   0  3\n5   1  0\n6   1  1\n7   1  2\n8   1  3\n9   2  0\n10  2  1\n11  2  2\n12  2  3\n13  3  0\n14  3  1\n15  3  2\n16  3  3\n```\n\n\n:::\n:::\n\n\nKemudian, kita ingin menghitung rata-rata dari tiap kemungkinan dua sampel. Kita bisa *apply* atau menerapkan fungsi statistik yang kita inginkan, misalnya `mean` atau rata-rata, untuk tiap baris di matriks `mat1`, sebagai berikut\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(mat1, 1, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.0 0.5 1.0 1.5 0.5 1.0 1.5 2.0 1.0 1.5 2.0 2.5 1.5 2.0 2.5 3.0\n```\n\n\n:::\n:::\n\n\nHasilnya bisa kita simpan sebagai kolom baru di *data frame*, misal kolom `Xbar`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_perm1[\"Xbar\"] <- apply(mat1, 1, mean)\ndf_perm1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   X1 X2 Xbar\n1   0  0  0.0\n2   0  1  0.5\n3   0  2  1.0\n4   0  3  1.5\n5   1  0  0.5\n6   1  1  1.0\n7   1  2  1.5\n8   1  3  2.0\n9   2  0  1.0\n10  2  1  1.5\n11  2  2  2.0\n12  2  3  2.5\n13  3  0  1.5\n14  3  1  2.0\n15  3  2  2.5\n16  3  3  3.0\n```\n\n\n:::\n:::\n\n\nSekarang, `df_perm1` menyimpan semua kemungkinan sampel berukuran 2 dengan pengembalian yang mungkin, disertai rata-rata masing-masing.\n\nSelanjutnya, kita perlu menghitung probabilitas dari tiap kemungkinan sampel. Perhatikan bahwa, karena *sampling* dilakukan **dengan pengembalian**, probabilitas antar tiap pengambilan bersifat **independen**. Sehingga, kita tinggal mengalikan probabilitas untuk masing-masing pengambilan.\n\nCaranya, kita bisa menghitung probabilitas masing-masing pengambilan (membuat matriks baru, misal `mat1_prob`), baru melakukan perkalian per baris.\n\nKarena distribusi `dist1` tergolong diskrit, kita bisa menerapkan PMFnya yaitu fungsi `d`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd(dist1)(mat1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25\n[16] 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25 0.25\n[31] 0.25 0.25\n```\n\n\n:::\n:::\n\n\nWaduh, hasilnya malah *flat*, daripada berbentuk matriks. Agar tetap berbentuk matriks, kita gunakan fungsi `apply` lagi, sebagai berikut\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat1_prob <- apply(mat1, 1:2, d(dist1))\nmat1_prob\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1] [,2]\n [1,] 0.25 0.25\n [2,] 0.25 0.25\n [3,] 0.25 0.25\n [4,] 0.25 0.25\n [5,] 0.25 0.25\n [6,] 0.25 0.25\n [7,] 0.25 0.25\n [8,] 0.25 0.25\n [9,] 0.25 0.25\n[10,] 0.25 0.25\n[11,] 0.25 0.25\n[12,] 0.25 0.25\n[13,] 0.25 0.25\n[14,] 0.25 0.25\n[15,] 0.25 0.25\n[16,] 0.25 0.25\n```\n\n\n:::\n:::\n\n\nSekarang kita tinggal mengalikan tiap baris (dengan `apply` lagi), dan menyimpan hasilnya sebagai kolom baru di *data frame*, misal `prob`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_perm1[\"prob\"] <- apply(mat1_prob, 1, prod)\ndf_perm1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   X1 X2 Xbar   prob\n1   0  0  0.0 0.0625\n2   0  1  0.5 0.0625\n3   0  2  1.0 0.0625\n4   0  3  1.5 0.0625\n5   1  0  0.5 0.0625\n6   1  1  1.0 0.0625\n7   1  2  1.5 0.0625\n8   1  3  2.0 0.0625\n9   2  0  1.0 0.0625\n10  2  1  1.5 0.0625\n11  2  2  2.0 0.0625\n12  2  3  2.5 0.0625\n13  3  0  1.5 0.0625\n14  3  1  2.0 0.0625\n15  3  2  2.5 0.0625\n16  3  3  3.0 0.0625\n```\n\n\n:::\n:::\n\n\nKini, tiap kemungkinan sampel berukuran 2 dengan pengembalian sudah disertai rata-rata dan probabilitas. Untuk memperoleh tabel (PMF untuk) distribusi *sample mean*, kita tinggal melakukan \"pengelompokkan\" data untuk tiap nilai statistiknya yaitu `Xbar` atau rata-rata, sembari menjumlahkan probabilitas. Caranya bisa dengan kode seperti berikut\n\n\n::: {.cell}\n\n```{.r .cell-code}\nXbar_prob1 <- aggregate(prob ~ Xbar,\n                        data = df_perm1,\n                        sum)\nXbar_prob1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Xbar   prob\n1  0.0 0.0625\n2  0.5 0.1250\n3  1.0 0.1875\n4  1.5 0.2500\n5  2.0 0.1875\n6  2.5 0.1250\n7  3.0 0.0625\n```\n\n\n:::\n:::\n\n\n`Xbar_prob1` adalah tabel PMF dari *sample mean*, yang telah diperoleh secara eksak. Mari kita visualisasikan distribusi *sample mean* tersebut menggunakan *histogram*, tetapi dengan fungsi `barplot` agar tiap nilai rata-rata memiliki bar tersendiri\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(height = Xbar_prob1[[\"prob\"]],\n        names.arg = Xbar_prob1[[\"Xbar\"]],\n        ylim = c(0, 5/16),\n        yaxp = c(0, 5/16, 5))\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nWhew! Perhatikan bahwa, untuk sampel berukuran 2, ternyata kemungkinannya cukup banyak. Lihat kembali dimensi dari `mat1` yaitu matriks berisi semua kemungkinan sampel berukuran 2 dengan pengembalian:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(mat1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16  2\n```\n\n\n:::\n:::\n\n\nBanyaknya baris bisa sampai 16 ini dihasilkan dari \n\n$$\\begin{align*}\n{}_{4}P_{2} &= \\frac{4!}{(4-2)!} \\\\\n            &= \\frac{(4)(3)(2!)}{2!} \\\\\n            &= (4)(3) = 12\n\\end{align*}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactorial(4) / factorial(4-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\nDengan 4 adalah ukuran *support* di distribusi asalnya, dan 2 adalah ukuran sampel. Ini masih contoh kecil.\n\nBayangkan apabila ukuran sampelnya besar. Maka banyaknya kemungkinan pengambilan menjadi amat sangat banyak. Terlalu banyak, sehingga lebih baik kita lakukan suatu penghampiran daripada langsung menghitung distribusi *sample mean* secara eksak.\n\nUntuk itu, perhatikan dalil-dalil berikut.\n\n## Dalil 1 - Dengan Pengembalian\n\n**Dalil 1**\n\nApabila sampel acak berukuran n diambil **dengan pengembalian** dari populasi berhingga yang berukuran $N$, dimana populasi tersebut mempunyai mean $\\mu$ dan variansi $\\sigma^2$ , maka untuk $n$ yang besar, distribusi dari mean sampel $\\bar{X}$ akan mendekati distribusi normal dengan mean $\\mu_\\bar{X} = \\mu$ dan $\\sigma\\bar{X}^2 = \\frac{\\sigma^2}{n}$. Dengan demikian $$Z = \\frac{\\bar{X} - \\mu}{\\frac{\\sigma}{\\sqrt{n}}} \\; \\text{mendekati} \\; N(0,1)$$\n\nCatatan: Dalil 1 berlaku untuk populasi berhingga dengan **ukuran sampel** $\\mathbf{n \\geq 30}$. Dalil 1 berlaku untuk $n < 30$ apabila distribusi dari populasinya tidak terlalu menyimpang dari distribusi normal.\n\n**Contoh**\n\nMisalkan diberikan populasi 1,1,1,3,4,5,6,6,6,7 dan misalkan diambil sampel acak berukuran 36 dari populasi tersebut dengan pengembalian. Tentukan probabilitas bahwa nilai rata-rata sampelnya antara 3.85 dan 4.45 !\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 <- c(1, 1, 1, 3, 4, 5, 6, 6, 6, 7,8,8)\n```\n:::\n\n\nKita hitung statistiknya\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean1 <- mean(data1)\nsd1 <- sd(data1)\n```\n:::\n\n\nSekarang kita hitung probabilitasnya\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 36\nprobability <-\n  pnorm(4.45,\n        mean = mean1,\n        sd = sd1/sqrt(n)) -\n    pnorm(3.85,\n          mean = mean1,\n          sd = sd1/sqrt(n))\nprobability\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2794876\n```\n\n\n:::\n:::\n\n\nAtau bisa kita ubah ke normal standar terlebih dahulu\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 36\nstandard_error <- sd1 / sqrt(n)\nlower_bound <- 3.85\nupper_bound <- 4.45\nz_lower <- (lower_bound - mean1) / standard_error\nz_upper <- (upper_bound - mean1) / standard_error\nprobability <- pnorm(z_upper) - pnorm(z_lower)\nprobability\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2794876\n```\n\n\n:::\n:::\n\n\n## Dalil 2 - Tanpa Pengembalian\n\n**Lalu bagaimana dengan tanpa pengembalian?** Misalkan kita punya suatu distribusi uniform\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunif2 <- c(1:50)\nunif2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n```\n\n\n:::\n:::\n\n\nLihat sebarannya\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(unif2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25.5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(unif2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14.57738\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(unif2, main = \"Uniform Distribution\", xlab = \" \")\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nSample size 30, 1000 kali percobaan\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor(i in 1:1000){\n  sample_means[i] <- mean(sample(50, 30, replace = FALSE))\n}\nhist(sample_means, main = \"Sample Size of 50\", xlab = \"Sample Means\")\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nDapat terlihat juga bahwa bentuk distribusinya mirip dengan distribusi normal! Akan tetapi, formula yang digunakannya berbeda, ingat dalil 2!\n\n**Dalil 2** Apabila sampel acak berukuran n diambil secara acak **tanpa pengembalian** dari suatu populasi berhingga berukuran $N$, dimana populasi tersebut memiliki mean $\\mu$ dan variansi $\\sigma^2$, maka distribusi probabilitas $\\bar{X}$ akan menghampiri normal dengan $\\mu_\\bar{X} = \\mu$ dan $\\sigma^2 = \\frac{\\sigma^2(N-n)}{n(N-1)}$\n\nCatatan: lagi-lagi, ada syarat $n \\geq 30$\n\nSecara umum, jika sampel yang diambil sangat besar (yaitu $n \\geq 30$) maka bisa digunakan **CLT** atau ***Central Limit Theorem***, juga disebut **Dalil Limit Pusat**\n\n# *Central Limit Theorem* (CLT)\n\nSemakin besar sampel yang diambil, distribusi *sample mean* makin mendekati distribusi normal $N(\\mu, \\sigma^2)$, dengan\n\n$$\\mu_\\bar{X} \\approx \\mu$$\n\n$$\\sigma_\\bar{X}^2 \\approx \\frac{\\sigma^2}{n}$$\n\nBagaimanapun bentuk distribusi aslinya, apabila $n \\geq 30$, distribusi normal di atas akan mendekati distribusi *sample mean* dengan sangat baik\n\n## Contoh CLT: Menghitung CDF\n\nSebuah perusahaan memproduksi bohlam. Bila umur bohlam itu menyebar normal dengan mean 800 jam dan standar deviasi 40 jam, hitunglah peluang bahwa suatu sampel acak 16 bohlam akan mempunyai umur rata-rata kurang dari 775 jam.\n\nJawab: misalkan $X$ adalah variabel acak untuk umur bohlam. Diminta\n\n$$\\text{Pr}(X < 775)$$\n\nyaitu nilai CDF di 775.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 16\nmean2 <- 800\nsd2 <- 40 / sqrt(n)\npnorm(775, mean = mean2, sd = sd2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.006209665\n```\n\n\n:::\n:::\n\n\nAtau jika ingin diubah ke dalam normal standar terlebih dahulu,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = (775-mean2) / sd2\npnorm(x) # otomatis mean=0, sd=1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.006209665\n```\n\n\n:::\n:::\n\n\n## CLT untuk sembarang data\n\ntransformasi data random menjadi normal standar (berlaku untuk distribusi kontinu apapun -\\> sampling dist.) gunakan CLT -\\> scale\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(101)\nn <- 100\nrandom <- rnorm(n, mean = 10, sd = 8)\npar(mfrow = c(1,2))\nplot(density(random), main = \"Sebelum\")\nplot(density(scale(random)), main = \"Sesudah\")\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## Contoh CLT: Probabilitas di Interval\n\nMisalkan diberikan populasi 1,1,1,3,4,5,6,6,6,7 dan misalkan diambil sampel acak berukuran 36 dari populasi tersebut dengan pengembalian. Tentukan probabilitas bahwa nilai rata-rata sampelnya antara 3.85 dan 4.45 !\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 <- c(1, 1, 1, 3, 4, 5, 6, 6, 6, 7)\n\nmean1 <- mean(data1)\nsd1 <- sd(data1)\n\nn <- 36\nstandard_error <- sd1 / sqrt(n)\n\nlower_bound <- 3.85\nupper_bound <- 4.45\nz_lower <- (lower_bound - mean1) / standard_error\nz_upper <- (upper_bound - mean1) / standard_error\n\nprobability <- pnorm(z_upper) - pnorm(z_lower)\nprobability\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5227107\n```\n\n\n:::\n:::\n\n\n# Distribusi-t\n\nDigunakan saat $n < 30$ (sehingga tidak bisa menggunakan CLT) dan variansi tidak diketahui\n\n## PDF\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt(x = 0.5, df = 14)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3431707\n```\n\n\n:::\n:::\n\n\n## CDF\n\n\n::: {.cell}\n\n```{.r .cell-code}\npt(0.025, df = 14) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5097961\n```\n\n\n:::\n:::\n\n\n## *Quantile function*\n\nPr(T\\<t)=0.05 (alpha) -\\> nyari t nya (t-table)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqt(.95, df = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.724718\n```\n\n\n:::\n:::\n\n\n## RNG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(121)\nn <- 100\nrandomt <- rt(n, df = 20)\n\nhist(randomt, breaks=50, xlim = c(-6, 4))\n```\n\n::: {.cell-output-display}\n![](modul7_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n## Penerapan distribusi-t\n\n**Contoh**\n\nTentukan nilai $k$ sedemikian sehingga\n\n$$\\text{Pr}(k < T < -1.761) = 0.045$$\n\ndari suatu sampel acak berukuran 15 diambil dari suatu populasi normal\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprob <- 0.045\natas <- pt(-1.716, df = 15)\n\nbawah <- atas - prob\nk <- qt(bawah, df = 15)\nk\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.691651\n```\n\n\n:::\n:::\n\n\n# Distribusi beda dua *mean*\n",
    "supporting": [
      "modul7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}