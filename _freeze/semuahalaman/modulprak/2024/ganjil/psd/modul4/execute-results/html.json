{
  "hash": "098c2f0f2220712bd653da9008619460",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"(Pertemuan 04) R: Visualisasi Dua Variabel, Time Series, dan ggplot2\"\nsubtitle: \"R: Two-Variable Visualization, Time Series, and ggplot2\"\ndescription: \"Offline di Departemen Matematika\"\ndate: 10/07/2024\npage-navigation: true\nformat: html\n---\n\n\nKembali ke [Pengantar Sains Data](./psd2024.qmd)\n\nMelanjutkan pertemuan sebelumnya, kali ini kita akan mempelajari lebih lanjut tentang visualisasi menggunakan R, yaitu visualisasi dua variabel (termasuk *line chart* untuk data *time series*), serta tentang *package* bernama `ggplot2` yang bisa mempermudah urusan visualisasi.\n\nKita coba gunakan *dataset* `iris` terlebih dahulu, ya. Aktifkan terlebih dahulu:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"iris\")\n```\n:::\n\n\nAgar konsisten (bahwa kita sedang berurusan dengan *data frame*), mari kita beri nama `df1` saja:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- iris\n```\n:::\n\n\nKita bisa lihat-lihat:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df1)\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica\n```\n\n\n:::\n:::\n\n\nKolom-kolomnya adalah:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  \"Species\"     \n```\n\n\n:::\n:::\n\n\n# Visualisasi Dua Variabel (dengan fungsi *built-in*)\n\nDi pertemuan sebelumnya, kita sudah membuat visualisasi frekuensi dengan fungsi seperti `barplot`, `pie`, dan `hist`, yang \"sudah ada dari sananya\" atau disebut *built-in*. Untuk keperluan visualisasi dua variabel, juga tersedia beberapa fungsi *built-in*.\n\n## Boxplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length) #1 variabel\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width) #2 variabel atau lebih\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width,\n        main = \"Boxplot Perbandingan Sepal Length dan Sepal Width\",\n        names = c(\"Sepal Length\", \"Sepal Width\")) #tambahkan judul dan xlabel\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width,\n        main = \"Boxplot Perbandingan Sepal Length dan Sepal Width\",\n        names = c(\"Sepal Length\", \"Sepal Width\"),\n        col = c(\"red\", \"blue\")) #ganti warna\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width,\n        main = \"Boxplot Perbandingan Sepal Length dan Sepal Width\",\n        names = c(\"Sepal Length\", \"Sepal Width\"),\n        col = c(\"red\", \"blue\"),\n        horizontal = TRUE) #rotate jadi horizontal\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width,\n        main = \"Boxplot Perbandingan Sepal Length dan Sepal Width\",\n        names = c(\"Sepal Length\", \"Sepal Width\"),\n        col = c(\"red\", \"blue\"),\n        notch = TRUE) # jadi \"mengerucut\" di sekitar median\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length ~ df1$Species)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(Sepal.Length ~ Species, data = df1)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length ~ df1$Species, \n        main = \"Perbandingan Sepal Length berdasarkan Species\",\n        xlab = \"Species\",\n        ylab = \"Sepal Length\",\n        col = c(\"blue\",\"yellow\",\"red\"))\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Scatter\n\nUntuk menggambar *scatter plot*, gunakan fungsi `plot`\n\nPlot paling dasar: semua variabel numerik menjadi scatter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n*Scatter plot* antar dua variabel pilihan:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1$Sepal.Length, df1$Sepal.Width)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nTambahkan judul pakai `main`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1$Sepal.Length, df1$Sepal.Width, \n     main = \"Ini Judul grafiknya\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nTambahkan label sumbu\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1$Sepal.Length, df1$Sepal.Width, \n     main = \"Ini Judul grafiknya\",\n     xlab = \"Sumbu X\",\n     ylab = \"Sumbu Y\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nBeri warna\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1$Sepal.Length, df1$Sepal.Width,\n     main = \"Scatter Plot Sepal Length dengan Sepal Width\",\n     xlab = \"Sepal Length\",\n     ylab = \"Sepal Width\",\n     col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# (Pengayaan) Visualisasi Tambahan (dengan fungsi *built-in*)\n\n## *Stem and Leaf Plot*\n\nUntuk melihat persebaran data (min, max, distribusi), mirip histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?stem\nView(ChickWeight) #data dari r\nstem(ChickWeight$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  The decimal point is 1 digit(s) to the right of the |\n\n   2 | 599999999\n   4 | 00000111111111111111111112222222222222223333456678888888899999999999+38\n   6 | 00111111122222222333334444455555666677777888888900111111222222333334+8\n   8 | 00112223344444455555566777788999990001223333566666788888889\n  10 | 0000111122233333334566667778889901122223445555667789\n  12 | 00002223333344445555667788890113444555566788889\n  14 | 11123444455556666677788890011234444555666777777789\n  16 | 00002233334444466788990000134445555789\n  18 | 12244444555677782225677778889999\n  20 | 0123444555557900245578\n  22 | 0012357701123344556788\n  24 | 08001699\n  26 | 12344569259\n  28 | 01780145\n  30 | 355798\n  32 | 12712\n  34 | 1\n  36 | 13\n```\n\n\n:::\n\n```{.r .cell-code}\nhist(ChickWeight$weight) #buat perbandingan\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(ChickWeight$weight) #cek nilai minimumnya\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(ChickWeight$weight) #cek maxnya\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 373\n```\n\n\n:::\n:::\n\n\nKalau ternyata min sama maxnya kurang tepat, ganti scalenya\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstem(ChickWeight$weight, scale = 5) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  The decimal point is 1 digit(s) to the right of the |\n\n   3 | 599999999\n   4 | 000001111111111111111111122222222222222233334\n   4 | 5667888888889999999999999\n   5 | 00000011111111222233333444\n   5 | 5555566667778888899999\n   6 | 001111111222222223333344444\n   6 | 555556666777778888889\n   7 | 001111112222223333344444444\n   7 | 6667778889999\n   8 | 001122233444444\n   8 | 5555556677778899999\n   9 | 0001223333\n   9 | 566666788888889\n  10 | 0000111122233333334\n  10 | 5666677788899\n  11 | 0112222344\n  11 | 5555667789\n  12 | 0000222333334444\n  12 | 555566778889\n  13 | 0113444\n  13 | 555566788889\n  14 | 111234444\n  14 | 5555666667778889\n  15 | 0011234444\n  15 | 555666777777789\n  16 | 000022333344444\n  16 | 6678899\n  17 | 000013444\n  17 | 5555789\n  18 | 12244444\n  18 | 55567778\n  19 | 222\n  19 | 5677778889999\n  20 | 0123444\n  20 | 5555579\n  21 | 0024\n  21 | 5578\n  22 | 00123\n  22 | 577\n  23 | 01123344\n  23 | 556788\n  24 | 0\n  24 | 8\n  25 | 001\n  25 | 699\n  26 | 12344\n  26 | 569\n  27 | 2\n  27 | 59\n  28 | 01\n  28 | 78\n  29 | 014\n  29 | 5\n  30 | 3\n  30 | 5579\n  31 | \n  31 | 8\n  32 | 12\n  32 | 7\n  33 | 12\n  33 | \n  34 | 1\n  34 | \n  35 | \n  35 | \n  36 | 1\n  36 | \n  37 | 3\n```\n\n\n:::\n\n```{.r .cell-code}\nstem(ChickWeight$weight, width = 100) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  The decimal point is 1 digit(s) to the right of the |\n\n   2 | 599999999\n   4 | 0000011111111111111111111222222222222222333345667888888889999999999999000000111111112222+18\n   6 | 0011111112222222233333444445555566667777788888890011111122222233333444444446667778889999\n   8 | 00112223344444455555566777788999990001223333566666788888889\n  10 | 0000111122233333334566667778889901122223445555667789\n  12 | 00002223333344445555667788890113444555566788889\n  14 | 11123444455556666677788890011234444555666777777789\n  16 | 00002233334444466788990000134445555789\n  18 | 12244444555677782225677778889999\n  20 | 0123444555557900245578\n  22 | 0012357701123344556788\n  24 | 08001699\n  26 | 12344569259\n  28 | 01780145\n  30 | 355798\n  32 | 12712\n  34 | 1\n  36 | 13\n```\n\n\n:::\n:::\n\n\n## *Dot Diagram*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?dotchart\nView(mtcars)\n```\n:::\n\n\nPaling Sederhana\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndotchart(mtcars$mpg)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nTambah Judul dan Label\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndotchart(mtcars$mpg, labels = row.names(mtcars),\n         cex = 0.9, xlab = \"mpg\",\n         main = \"Persebaran Jarak Yang Dapat Ditempuh Per Galon\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nBerdasarkan Grup\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrps <- as.factor(mtcars$cyl)\nmy_cols <- c(\"blue\", \"darkgreen\", \"orange\")\ndotchart(mtcars$mpg, labels = row.names(mtcars),\n         groups = grps, gcolor = my_cols,\n         color = my_cols[grps],\n         cex = 0.9,  pch = 22, xlab = \"mpg\",\n         main = \"Persebaran Jarak Yang Dapat Ditempuh Per Galon Berdasarkan Jumlah Silinder\")\nlegend(\"bottomright\", legend = c(\"4\",\"6\", \"6\"),\n       fill = my_cols, cex = 0.8)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n# *Time Series* dan *Line Chart*\n\nData periodik terhadap waktu (misalnya data tahunan atau data bulanan) disebut *time series data* (data runtun waktu), biasa disebut *time series* saja atau disingkat \"TS\". Visualisasi *line chart* biasa digunakan untuk data *time series*, dan begitu juga sebaliknya, data *time series* biasa divisualisasikan dengan *line chart*.\n\n## Mencari data *time series*\n\nSayangnya, *dataset* `iris` tidak memiliki data *time series*. Bahkan, dari semua *dataset* yang *built-in*, data *time series* cenderung berupa *dataset* tersendiri, yang memang khusus menyimpan data variabel tertentu saja terhadap waktu.\n\nOleh karena itu, mari kita coba *dataset* lain. Kalian bisa melihat-lihat *dataset* yang sudah tersedia di R dengan perintah `data()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata()\n```\n:::\n\n\nSebenarnya, tiap *dataset* berasal dari sebuah *package*. Perhatikan bahwa *dataset* `iris` berasal dari *package* bernama `datasets` (yang memang sudah *built-in*)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?iris\n```\n:::\n\n\nKita bisa spesifik melihat daftar *dataset* yang berasal dari *package* tertentu dengan tambahan opsi `package`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"datasets\")\n```\n:::\n\n\nUntuk data *time series*, kita bisa mencoba misalnya `nhtemp`, rata-rata tahunan untuk suhu di kota New Haven di Amerika Serikat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"nhtemp\")\n```\n:::\n\n\nMari kita lihat:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(nhtemp)\nnhtemp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime Series:\nStart = 1912 \nEnd = 1971 \nFrequency = 1 \n [1] 49.9 52.3 49.4 51.1 49.4 47.9 49.8 50.9 49.3 51.9 50.8 49.6 49.3 50.6 48.4\n[16] 50.7 50.9 50.6 51.5 52.8 51.8 51.1 49.8 50.2 50.4 51.6 51.8 50.9 48.8 51.7\n[31] 51.0 50.6 51.7 51.5 52.1 51.3 51.0 54.0 51.4 52.7 53.1 54.6 52.0 52.0 50.9\n[46] 52.6 50.2 52.6 51.6 51.9 50.5 50.9 51.7 51.4 51.7 50.8 51.9 51.8 51.9 53.0\n```\n\n\n:::\n:::\n\n\nTerlihat bahwa data ini berupa *time series* yang tidak langsung berbentuk tabel. Di R, data berjenis *time series* memang diberi perhatian khusus, sehingga menjadi yang namanya *\"time series object\"*. Data runtun waktu dipelajari lebih lanjut di mata kuliah Metode Peramalan *(Forecasting Methods / Time Series Analysis)*.\n\n## *Line chart* instan dari objek *time series*\n\nDi pertemuan kali ini, kita hanya akan membuat visualisasinya dengan *line chart*.\n\nPerhatian khusus tersebut ternyata sangat mempermudah cara memvisualisasikannya:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(nhtemp)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nLangsung jadi!\n\nNamun, apabila sewaktu-waktu kalian berurusan dengan tabel data yang sebenarnya berupa *time series*, mungkin R tidak akan langsung mengakuinya sebagai *time series*. Tidak masalah, karena kita masih bisa membuat *line chart* dari *data frame*.\n\n## Mengubah *time series object* menjadi *data frame*\n\nSebelum bisa membuat *line chart* dari *data frame*, datanya harus ada. Kalian bisa sewaktu-waktu *import* data kalian sendiri, kalau ada. Di sini, kita hanya akan mengubah *time series object* `nhtemp` menjadi *data frame*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_nhtemp <- data.frame(Time=time(nhtemp),\n                        Temp=as.matrix(nhtemp))\n```\n:::\n\n\nMari kita lihat:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df_nhtemp)\ndf_nhtemp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Time Temp\n1  1912 49.9\n2  1913 52.3\n3  1914 49.4\n4  1915 51.1\n5  1916 49.4\n6  1917 47.9\n7  1918 49.8\n8  1919 50.9\n9  1920 49.3\n10 1921 51.9\n11 1922 50.8\n12 1923 49.6\n13 1924 49.3\n14 1925 50.6\n15 1926 48.4\n16 1927 50.7\n17 1928 50.9\n18 1929 50.6\n19 1930 51.5\n20 1931 52.8\n21 1932 51.8\n22 1933 51.1\n23 1934 49.8\n24 1935 50.2\n25 1936 50.4\n26 1937 51.6\n27 1938 51.8\n28 1939 50.9\n29 1940 48.8\n30 1941 51.7\n31 1942 51.0\n32 1943 50.6\n33 1944 51.7\n34 1945 51.5\n35 1946 52.1\n36 1947 51.3\n37 1948 51.0\n38 1949 54.0\n39 1950 51.4\n40 1951 52.7\n41 1952 53.1\n42 1953 54.6\n43 1954 52.0\n44 1955 52.0\n45 1956 50.9\n46 1957 52.6\n47 1958 50.2\n48 1959 52.6\n49 1960 51.6\n50 1961 51.9\n51 1962 50.5\n52 1963 50.9\n53 1964 51.7\n54 1965 51.4\n55 1966 51.7\n56 1967 50.8\n57 1968 51.9\n58 1969 51.8\n59 1970 51.9\n60 1971 53.0\n```\n\n\n:::\n:::\n\n\n## *Line chart* dari *data frame*\n\nSekarang tinggal kita gambar, dengan cara menggambar *scatter plot* yang kemudian diberi opsi `type = \"l\"` agar menjadi *line chart*:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df_nhtemp$Time, df_nhtemp$Temp, type=\"l\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df_nhtemp$Time, df_nhtemp$Temp, type=\"l\",\n     xlab=\"Time\", ylab=\"Temp\",\n     main=\"Average Yearly Temperature in New Haven\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nHmm, kurang bagus ya. Untuk *line chart* yang lebih bagus (dan juga berbagai *plot* lainnya) serta lebih fleksibel, selanjutnya kita akan mencoba `ggplot2`, sebuah *package* untuk *plotting* di R yang sangat terkenal dan sering digunakan di kalangan pengguna R.\n\n# ggplot2\n\nFungsi-fungsi *plot* yang tersedia di R secara *built-in* (terkadang disebut \"base R\"), yang sudah kita eksplorasi sejauh ini, cenderung terbatas dan tidak begitu fleksibel. Kalangan pengguna R cenderung menggunakan sebuah *package* terkenal di R untuk keperluan *plotting*, yaitu `ggplot2`.\n\nInstal terlebih dahulu, kalau belum:\n\n```\ninstall.packages(\"ggplot2\")\n```\n\nLalu aktifkan:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n## *Dataset* yang tersedia di `ggplot2`\n\nKebetulan, `ggplot2` menyediakan beberapa *dataset* (yang tidak tersedia di *base R*) yang bisa kita gunakan untuk mempelajari dan mengeksplorasi `ggplot2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"ggplot2\")\n```\n:::\n\n\nKita lihat, data *time series* tersedia di `ggplot2`, bernama `economics`. Mari kita lihat-lihat:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"economics\", package = \"ggplot2\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- economics\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df2)\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 574 × 6\n   date         pce    pop psavert uempmed unemploy\n   <date>     <dbl>  <dbl>   <dbl>   <dbl>    <dbl>\n 1 1967-07-01  507. 198712    12.6     4.5     2944\n 2 1967-08-01  510. 198911    12.6     4.7     2945\n 3 1967-09-01  516. 199113    11.9     4.6     2958\n 4 1967-10-01  512. 199311    12.9     4.9     3143\n 5 1967-11-01  517. 199498    12.8     4.7     3066\n 6 1967-12-01  525. 199657    11.8     4.8     3018\n 7 1968-01-01  531. 199808    11.7     5.1     2878\n 8 1968-02-01  534. 199920    12.3     4.5     3001\n 9 1968-03-01  544. 200056    11.7     4.1     2877\n10 1968-04-01  544  200208    12.3     4.6     2709\n# ℹ 564 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nls(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"date\"     \"pce\"      \"pop\"      \"psavert\"  \"uempmed\"  \"unemploy\"\n```\n\n\n:::\n:::\n\n\nData *time series* ini terdiri dari sejumlah kolom terhadap waktu.\n\n## Dasar-dasar `ggplot2` dengan *line chart*\n\nMenggunakan *line chart*, kita bisa memvisualisasikan bagaimana perubahan suatu variabel terhadap variabel waktu (`date`). Misalnya, kita bisa melihat bagaimana perubahan banyaknya pengangguran (`unemploy`) dari tahun ke tahun.\n\nApabila kita gunakan fungsi *built-in* untuk *line chart*, jadinya seperti berikut:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df2$date, df2$unemploy,\n     type = \"l\",\n     col = \"red\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nMari kita coba buat dengan `ggplot2`.\n\nLangkah pertama adalah menentukan *data frame* yang ingin kita gunakan, serta variabel yang akan di sumbu x dan variabel yang akan di sumbu y. *Syntax*-nya seperti berikut.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df2, aes(x = date, y = unemploy))\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n`aes` artinya *aesthetic* (estetika), sebenarnya dalam artian \"sesuatu yang bisa dilihat\". Kita memang ingin melihat data `date` untuk sumbu x dan `unemploy` untuk sumbu y, sehingga kita tuliskan seperti itu.\n\nNamun, sejauh ini, isi *plot* masih kosong. Kita baru membuat *canvas* nya saja, belum garis-garisnya.\n\nAgar ada garis, kita \"tambahkan\" dengan fungsi `geom_line()` seperti berikut.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df2, aes(x = date, y = unemploy)) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\nMungkin tampak aneh, seolah-olah fungsi dijumlahkan dengan fungsi. Cara kerjanya kurang lebih seperti berikut.\n\n* Sebenarnya, fungsi `ggplot` menghasilkan \"objek\" atau \"benda\" yang berupa *plot* kosong.\n\n* Serupa, fungsi `geom_line` menghasilkan \"objek\" berupa perintah untuk menggambarkan garis-garis.\n\n* Begitu kita jumlahkan, objek hasil `geom_line` diterapkan ke objek hasil `ggplot`.\n\n* Hasil jumlahnya berupa objek *plot* baru, yaitu *line chart* yang kita inginkan.\n\n* Objek baru itulah yang kemudian ditampilkan.\n\nCara ini sangat berbeda dengan cara kerja fungsi-fungsi *plotting* di *base R* yang memang berupa perintah. \n\nPenjumlahan seperti itu di `ggplot2` bisa kita bayangkan sebagai \"komposisi\", yang pada akhirnya menghasilkan suatu objek *plot* akhir. Ibaratnya seperti penulisan penjumlahan bilangan di R,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\nyang memang menggabungkan 2 dengan 3 untuk menghasilkan hasil akhir yaitu 5, yang kemudian ditampilkan.\n\nSebagaimana hasil penjumlahan bilangan itu bisa kita simpan ke dalam variabel, \"hasil jumlahan *plot*\" dalam penggunaan `ggplot2` sebenarnya juga bisa kita simpan ke dalam variabel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntren_pengangguran <- ggplot(df2, aes(x = date, y = unemploy)) + \n  geom_line()\n```\n:::\n\n\nKarena sudah tersimpan ke dalam variabel, kita bisa menampilkan *plot* akhir tersebut kapan saja, cukup dengan memanggil variabelnya:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntren_pengangguran\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\nFleksibilitas seperti ini tidak ada ketika kita menggunakan fungsi-fungsi *plotting* dari *base R*.\n\nTentunya, kita juga bisa menambahkan label, dengan menambahkan `labs` seperti berikut\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df2, aes(x = date, y = unemploy)) + \n  geom_line() + \n  labs(\n    title = \"Line Chart Tahun dengan Jumlah Pengangguran\",\n    x = \"Tahun\",\n    y = \"Jumlah Pengangguran\"\n  )\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n## *Scatter*\n\nPenulisannya mirip, tetapi menggunakan `geom_point` daripada `geom_line`\n\nSecara tampilan pun, bedanya *line chart* dan *scatter plot* hanyalah pilihan antara menggambar garis atau menggambar titik-titik.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\nKita juga bisa menambahkan warna-warna sesuai kolom lain, misal berdasarkan spesies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\nBetapa fleksibelnya, ya! Fitur *scatter plot* `plot` di *base R* tidak se-fleksibel ini. Lebih nyaman juga, karena keterangan warna-warnanya juga langsung ada.\n\nJangan lupa tambahkan label dengan `labs` seperti berikut:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + \n  geom_point() + \n  labs(\n    title = \"Scatter Plot Sepal Length vs Sepal Width\",\n    x = \"Sepal Length\",\n    y = \"Sepal Width\",\n    color = \"Species Names\"\n  )\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\nContoh lain: `Petal.Length` vs. `Petal.Width`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Petal.Length, y = Petal.Width, color = Species)) + \n  geom_point() + \n  labs(\n    title = \"Scatter Plot Petal Length vs Petal Width\",\n    x = \"Petal Length\",\n    y = \"Petal Width\",\n    color = \"Species Names\"\n  )\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n## *Bar Chart*\n\nDi pertemuan sebelumnya, kita sudah menggunakan *bar chart* untuk memvisualisasi frekuensi nilai-nilai di satu variabel, menggunakan *dataset* `iris`. Persebaran `Species` ternyata kurang menarik, kecuali apabila dilakukan *filter* data terlebih dahulu.\n\nAgar lebih mudah, mari kita coba *dataset* lain yang sudah memiliki persebaran lebih menarik. Tidak harus dari `ggplot2`, bisa juga dari package* `datasets` yang *built-in*. Kita bisa cari-cari dulu:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"datasets\")\n```\n:::\n\n\nMisalnya kita pilih `mtcars` dari `datasets` (daripada dari `ggplot2`), yang berisi data mobil-mobil dari majalah *Motor Trend* tahun 1974.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"mtcars\", package = \"datasets\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- mtcars\n```\n:::\n\n\nKita bisa lihat isinya:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df3)\ndf3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nls(df3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"am\"   \"carb\" \"cyl\"  \"disp\" \"drat\" \"gear\" \"hp\"   \"mpg\"  \"qsec\" \"vs\"  \n[11] \"wt\"  \n```\n\n\n:::\n:::\n\n\nPerhatikan bahwa tiap baris adalah mobil tersendiri, dan datanya memang tidak terlalu banyak. Salah satu kolomnya adalah `cyl`, banyaknya \"silinder\" untuk tiap mobil, yaitu mesin di dalam mobil yang biasa memompa bensin.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3$cyl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n```\n\n\n:::\n:::\n\n\nSepertinya persebarannya menarik. Tidak seperti fungsi `barplot` dari *base R*, di `ggplot2` kita tidak perlu membuat tabel frekuensi untuk membuat *bar chart*. Langsung saja tambahkan `geom_bar` seperti berikut. Karena hanya ada satu variabel, kita cukup pasang variabel sumbu x saja.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = cyl)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\nUntuk memberi warna, gunakan opsi `fill` di `aes`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = cyl, fill = \"red\")) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\nKita juga bisa menentukan ketebalan dengan opsi `width` di `geom_bar`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = cyl, fill = \"red\")) + \n  geom_bar(width = 1)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\nSeandainya kalian justru memiliki data yang berupa semacam tabel frekuensi saja, misalnya data *voting* anonim, *bar chart* masih bisa dibuat dengan fungsi terpisah yaitu `geom_col` daripada `geom_bar`\n\nSebagai contoh, misalkan kita punya tabel frekuensi untuk variabel `cyl`, yang bisa kita peroleh sebagai berikut (seperti di pertemuan sebelumnya):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyl_freq <- data.frame(table(df3$cyl, dnn=\"cyl\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(cyl_freq)\ncyl_freq\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cyl Freq\n1   4   11\n2   6    7\n3   8   14\n```\n\n\n:::\n:::\n\n\nKita bisa menggambar *bar chart* untuk tabel frekuensi tersebut dengan tambahan fungsi `geom_col` seperti berikut.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cyl_freq, aes(x = cyl, y = Freq)) + \n  geom_col()\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\nKita juga bisa memberi warna (dengan `fill` di `aes` di `ggplot`) dan menentukan lebar batang (dengan `width` di `geom_col`), sebagaimana ketika menggunakan `geom_bar`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cyl_freq, aes(x = cyl, y = Freq, fill = \"red\")) + \n  geom_col(width = 0.5)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\n## *Pie Chart*\n\nSelain *bar chart*, ada *pie chart* sebagai visualisasi yang berbeda untuk kegunaan yang sama. Sayangnya, di `ggplot2` tidak ada fungsi khusus untuk *pie chart*. Namun, kita bisa akali dengan membuat *bar chart* dengan `geom_bar` seperti berikut, yang kemudian diterapkan koordinat polar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = factor(1), fill = factor(cyl))) + \n  geom_bar(width = 1) + \n  coord_polar(theta = \"y\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\nDi sini, fungsi `factor` diperlukan untuk memberitahu R bahwa data `cyl` berupa data kategorik. Kita juga pasang `x = factor(1)` karena di sini seolah-olah hanya ada satu batang di *bar chart* (yang kemudian diterapkan koordinat polar), dan kita biasa hanya memasang sumbu x ketika membuat *bar chart*.\n\nApabila data kita berupa semacam tabel frekuensi saja, kita juga bisa melakukan hal serupa dengan `geom_col` agar tetap bisa membuat *pie chart*. Caranya seperti berikut, juga menggantikan `x = cyl` dengan `x = factor(1)`, sedangkan opsi `fill` tetap diberi `factor(cyl)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cyl_freq, aes(x = factor(1), y = Freq, fill = factor(cyl))) + \n  geom_col() +\n  coord_polar(theta = \"y\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n\n## *Histogram*\n\nDi `ggplot2`, *histogram* juga seolah-olah seperti sejenis *bar chart*. Mari kita coba gambar *histogram* untuk `Sepal.Length` seperti di pertemuan sebelumnya. Kali ini, tambahkan `geom_histogram`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length)) + \n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\nKita bisa menentukan lebar batang di *histogram* dengan opsi `binwidth`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length)) + \n  geom_histogram(binwidth = 0.5)\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\nKita juga bisa memberi opsi warna, yaitu `fill` untuk warna isi batangnya dan `color` untuk warna pinggiran batangnya.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length)) + \n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n## *Boxplot*\n\nUntuk *boxplot*, tambahkan `geom_boxplot`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Species, y = Sepal.Length)) + \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\nKita juga bisa menenukan warna isi yaitu `fill` dan warna pinggiran yaitu `color`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Species, y = Sepal.Length)) + \n  geom_boxplot(fill = \"skyblue\", color = \"black\")\n```\n\n::: {.cell-output-display}\n![](modul4_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n# Lampiran untuk belajar lebih lanjut\n\nggplot2:\n\n<https://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html>\n",
    "supporting": [
      "modul4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}