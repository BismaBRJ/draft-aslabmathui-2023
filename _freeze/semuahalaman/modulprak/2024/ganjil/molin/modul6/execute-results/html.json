{
  "hash": "225a49e359fefcbd1a37f19a5ad530a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Logistic Regression\"\nsubtitle: \"Pembelajaran regresi logistic\"\nimage: static\\bg_modul6.jpg\ndescription: \"Offline di Departemen Matematika\"\ndate: 11/25/2024\npage-navigation: true\nformat:\n  html:\n    code-overflow: wrap\nknitr:\n  opts_chunk:\n    comment: ''\nformat-links: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n# Struktur Pembelajaran\nHalo, selamat sejahtera semua. Kali ini kita akan masuk pembelajaran regresi logistik. Pembelajaran kali ini akan memiliki bertujuan untuk mengetahui secara sederhana  untuk kalian dapat menentukan kapan kalian menggunakan regresi linear sederhana & regresi logistik sederhana.\n\nAkan tetapi, bagi kalian yang ingin memahami secara penuh, kita tetap menyediakan penjelasan pada link halaman lainnya.\n\n## Mempersiapkan code\n### Attach Data\nKita akan mendapatkan koleksi data *real* dari [repositori pembelajaran mesin UCI](http://archive.ics.uci.edu/) khususnya kita akan mengambil data [penyakit jantung](http://archive.ics.uci.edu/ml/datasets/Heart+Disease) \n\n\n\n\n\n\nKita mulai dengan membuat variabel bernama URL dan menyetelnya ke lokasi data yang kita inginkan \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://raw.githubusercontent.com/StatQuest/logistic_regression_demo/master/processed.cleveland.data\"\n \ndata <- read.csv(url, header=FALSE)\n```\n:::\n\n\nbeginilah cara `R` membaca `collection` data dari URL.\n\nFungsi `head` menunjukkan kepada kita 6 baris data pertama, sayangnya tidak ada kolom yang diberi **label**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  V1 V2 V3  V4  V5 V6 V7  V8 V9 V10 V11 V12 V13 V14\n1 63  1  1 145 233  1  2 150  0 2.3   3 0.0 6.0   0\n2 67  1  4 160 286  0  2 108  1 1.5   2 3.0 3.0   2\n3 67  1  4 120 229  0  2 129  1 2.6   2 2.0 7.0   1\n4 37  1  3 130 250  0  0 187  0 3.5   3 0.0 3.0   0\n5 41  0  2 130 204  0  2 172  0 1.4   1 0.0 3.0   0\n6 56  1  2 120 236  0  0 178  0 0.8   1 0.0 3.0   0\n```\n\n\n:::\n:::\n\n\n**Oh no!**\n\nData nya tidak rapih. Kalau begitu, sekarang ...\n\n### Pre-Processing Data\n\nKita menamai kolom tersebut dengan nama yang terdaftar di situs web UCI.\n\nMari kita format ulang data nya agar:\n\n1. **Mudah digunakan**\n2. **Ditafsirkan** *( interpreted )* dengan benar oleh `glm()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(data) <- c(\n  \"age\",\n  \"sex\",# 0 = female, 1 = male\n  \"cp\", # chest pain\n  # 1 = typical angina,\n  # 2 = atypical angina,\n  # 3 = non-anginal pain,\n  # 4 = asymptomatic\n  \"trestbps\", # resting blood pressure (in mm Hg)\n  \"chol\", # serum cholestoral in mg/dl\n  \"fbs\",  # fasting blood sugar if less than 120 mg/dl, 1 = TRUE, 0 = FALSE\n  \"restecg\", # resting electrocardiographic results\n  # 1 = normal\n  # 2 = having ST-T wave abnormality\n  # 3 = showing probable or definite left ventricular hypertrophy\n  \"thalach\", # maximum heart rate achieved\n  \"exang\",   # exercise induced angina, 1 = yes, 0 = no\n  \"oldpeak\", # ST depression induced by exercise relative to rest\n  \"slope\", # the slope of the peak exercise ST segment\n  # 1 = upsloping\n  # 2 = flat\n  # 3 = downsloping\n  \"ca\", # number of major vessels (0-3) colored by fluoroscopy\n  \"thal\", # this is short of thalium heart scan\n  # 3 = normal (no cold spots)\n  # 6 = fixed defect (cold spots during rest and exercise)\n  # 7 = reversible defect (when cold spots only appear during exercise)\n  \"hd\" # (the predicted attribute) - diagnosis of heart disease\n  # 0 if less than or equal to 50% diameter narrowing\n  # 1 if greater than 50% diameter narrowing\n)\n```\n:::\n\n\n\nHoorayy ðŸ¥° sekarang ketika kita melihat 6 baris pertama dengan fungsi `head` segalanya terlihat jauh lebih baikðŸŽ‰\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age sex cp trestbps chol fbs restecg thalach exang oldpeak slope  ca thal hd\n1  63   1  1      145  233   1       2     150     0     2.3     3 0.0  6.0  0\n2  67   1  4      160  286   0       2     108     1     1.5     2 3.0  3.0  2\n3  67   1  4      120  229   0       2     129     1     2.6     2 2.0  7.0  1\n4  37   1  3      130  250   0       0     187     0     3.5     3 0.0  3.0  0\n5  41   0  2      130  204   0       2     172     0     1.4     1 0.0  3.0  0\n6  56   1  2      120  236   0       0     178     0     0.8     1 0.0  3.0  0\n```\n\n\n:::\n:::\n\n\n\nNamun, fungsi `str` yang menjelaskan struktur data memberi tahu kita bahwa beberapa kolom sedang kacau saat ini.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data) # this shows that we need to tell R which columns contain factors\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t303 obs. of  14 variables:\n $ age     : num  63 67 67 37 41 56 62 57 63 53 ...\n $ sex     : num  1 1 1 1 0 1 0 0 1 1 ...\n $ cp      : num  1 4 4 3 2 2 4 4 4 4 ...\n $ trestbps: num  145 160 120 130 130 120 140 120 130 140 ...\n $ chol    : num  233 286 229 250 204 236 268 354 254 203 ...\n $ fbs     : num  1 0 0 0 0 0 0 0 0 1 ...\n $ restecg : num  2 2 2 0 2 0 2 0 2 2 ...\n $ thalach : num  150 108 129 187 172 178 160 163 147 155 ...\n $ exang   : num  0 1 1 0 0 0 0 1 0 1 ...\n $ oldpeak : num  2.3 1.5 2.6 3.5 1.4 0.8 3.6 0.6 1.4 3.1 ...\n $ slope   : num  3 2 2 3 1 1 3 1 2 3 ...\n $ ca      : chr  \"0.0\" \"3.0\" \"2.0\" \"0.0\" ...\n $ thal    : chr  \"6.0\" \"3.0\" \"7.0\" \"3.0\" ...\n $ hd      : int  0 2 1 0 0 0 3 0 2 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# it also shows us that there are some missing values. There are \"?\"s\n# in the dataset. These are in the \"ca\" and \"thal\" columns...\n```\n:::\n\n\nkekacauannya adalah sebagai berikut:\n\n1. `sex` adalah angka (**number**) tetapi seharusnya menjadi **factor** di mana nol mewakili perempuan dan satu mewakili laki laki \n2. `CP` alias nyeri dada juga seharusnya menjadi **factor** di mana level 1 hingga 3 mewakili berbagai jenis nyeri dan 4 tidak mewakili nyeri dada \n3. `CA` dan `Thal` disebut dengan benar sebagai **faktor** tetapi salah satu levelnya adalah *tanda tanya* saat kita membutuhkannya\n\nJadi kita harus melakukan **pembersihan**\n\n### Cleaning Data\n\nHal pertama yang kita lakukan adalah \n\n- mengubah *tanda tanya* menjadi `NA` \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## First, convert \"?\"s to NAs...\ndata[data == \"?\"] <- NA\n```\n:::\n\n\n\n- lalu hanya untuk mempermudah melihat data kita mengubah angka nol dalam `sex` menjadi F untuk perempuan dan yang menjadi M untuk laki laki \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Now add factors for variables that are factors and clean up the factors\n## that had missing data...\ndata[data$sex == 0,]$sex <- \"F\"\ndata[data$sex == 1,]$sex <- \"M\"\ndata$sex <- as.factor(data$sex)\n```\n:::\n\n\n\n- terakhir kita mengubah kolom yang seharusnya menjadi **factor** karena memang seharusnya demikian lihat situs web UCI\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$cp <- as.factor(data$cp)\ndata$fbs <- as.factor(data$fbs)\ndata$restecg <- as.factor(data$restecg)\ndata$exang <- as.factor(data$exang)\ndata$slope <- as.factor(data$slope)\n```\n:::\n\n\n\nOh no! Coba perhatikan yang lain sekarang.\nKarena kolom `CA` awalnya memiliki *tanda tanya* di dalamnya alih-alih menganggap itu kolom `string`, kita mengoreksi asumsi itu dengan memberi tahu bahwa itu adalah kolom `integer` dan kemudian kita mengubahnya menjadi **factor**, lalu kita melakukan hal yang sama untuk `Thal`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$ca <- as.integer(data$ca) # since this column had \"?\"s in it\n# R thinks that the levels for the factor are strings, but\n# we know they are integers, so first convert the strings to integers...\ndata$ca <- as.factor(data$ca)  # ...then convert the integers to factor levels\n\ndata$thal <- as.integer(data$thal) # \"thal\" also had \"?\"s in it.\ndata$thal <- as.factor(data$thal)\n```\n:::\n\n\n\n- hal lain yang perlu kita lakukan pada data adalah menjadikan `HD` alias penyakit jantung sebagai **factor** yang mudah dilihat.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## This next line replaces 0 and 1 with \"Healthy\" and \"Unhealthy\"\ndata$hd <- ifelse(test=data$hd == 0, yes=\"Healthy\", no=\"Unhealthy\")\ndata$hd <- as.factor(data$hd) # Now convert to a factor\n```\n:::\n\n\n\nDi sini saya menggunakan trik *fancy* dengan fungsi `if-else` untuk mengubah angka nol menjadi sehat dan yang menjadi tidak sehat. \n\nKita bisa saja melakukan trik serupa untuk `sex` tapi saya ingin menunjukkan kepada Anda, kedua cara ini untuk mengubah angka menjadi `string`.\n\nSetelah selesai memperbaiki data, kita periksa bahwa kita telah membuat perubahan yang sesuai kita harapkan dengan fungsi `str` \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data) ## this shows that the correct columns are factors\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t303 obs. of  14 variables:\n $ age     : num  63 67 67 37 41 56 62 57 63 53 ...\n $ sex     : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 1 2 1 1 2 2 ...\n $ cp      : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 4 4 3 2 2 4 4 4 4 ...\n $ trestbps: num  145 160 120 130 130 120 140 120 130 140 ...\n $ chol    : num  233 286 229 250 204 236 268 354 254 203 ...\n $ fbs     : Factor w/ 2 levels \"0\",\"1\": 2 1 1 1 1 1 1 1 1 2 ...\n $ restecg : Factor w/ 3 levels \"0\",\"1\",\"2\": 3 3 3 1 3 1 3 1 3 3 ...\n $ thalach : num  150 108 129 187 172 178 160 163 147 155 ...\n $ exang   : Factor w/ 2 levels \"0\",\"1\": 1 2 2 1 1 1 1 2 1 2 ...\n $ oldpeak : num  2.3 1.5 2.6 3.5 1.4 0.8 3.6 0.6 1.4 3.1 ...\n $ slope   : Factor w/ 3 levels \"1\",\"2\",\"3\": 3 2 2 3 1 1 3 1 2 3 ...\n $ ca      : Factor w/ 4 levels \"0\",\"1\",\"2\",\"3\": 1 4 3 1 1 1 3 1 2 1 ...\n $ thal    : Factor w/ 3 levels \"3\",\"6\",\"7\": 2 1 3 1 1 1 1 1 3 3 ...\n $ hd      : Factor w/ 2 levels \"Healthy\",\"Unhealthy\": 1 2 2 1 1 1 2 1 2 2 ...\n```\n\n\n:::\n:::\n\n\nhoooraaayy berhasil ðŸŽ‰ðŸŽ‰ðŸŽ‰\n\n\n### Handling Missing Value\n\nSekarang kita melihat berapa banyak baris sampel data yang memiliki nilai `na`. nanti kita akan memutuskan apakah kita bisa membuang sampel ini atau apakah kita harus memasukkan nilai untuk `NA`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Now determine how many rows have \"NA\" (aka \"Missing data\"). If it's just\n## a few, we can remove them from the dataset, otherwise we should consider\n## imputing the values with a Random Forest or some other imputation method.\nnrow(data[is.na(data$ca) | is.na(data$thal),])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[is.na(data$ca) | is.na(data$thal),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    age sex cp trestbps chol fbs restecg thalach exang oldpeak slope   ca thal\n88   53   F  3      128  216   0       2     115     0     0.0     1    0 <NA>\n167  52   M  3      138  223   0       0     169     0     0.0     1 <NA>    3\n193  43   M  4      132  247   1       2     143     1     0.1     2 <NA>    7\n267  52   M  4      128  204   1       0     156     1     1.0     2    0 <NA>\n288  58   M  2      125  220   0       0     144     0     0.4     2 <NA>    7\n303  38   M  3      138  175   0       0     173     0     0.0     1 <NA>    3\n           hd\n88    Healthy\n167   Healthy\n193 Unhealthy\n267 Unhealthy\n288   Healthy\n303   Healthy\n```\n\n\n:::\n\n```{.r .cell-code}\n## so 6 of the 303 rows of data have missing values. This isn't a large\n## percentage (2%), so we can just remove them from the dataset\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 303\n```\n\n\n:::\n:::\n\n\n\n6 baris sampel data memiliki `NA` di dalamnya. \n\nkita dapat melihat sampel di dalamnya dengan memilih baris tersebut dari `dataframe` dan di sanalah mereka di sini adalah nilai `NA` lima dari enam sampel adalah laki-laki dan dua dari enam memiliki penyakit jantung. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[is.na(data$ca) | is.na(data$thal),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    age sex cp trestbps chol fbs restecg thalach exang oldpeak slope   ca thal\n88   53   F  3      128  216   0       2     115     0     0.0     1    0 <NA>\n167  52   M  3      138  223   0       0     169     0     0.0     1 <NA>    3\n193  43   M  4      132  247   1       2     143     1     0.1     2 <NA>    7\n267  52   M  4      128  204   1       0     156     1     1.0     2    0 <NA>\n288  58   M  2      125  220   0       0     144     0     0.4     2 <NA>    7\n303  38   M  3      138  175   0       0     173     0     0.0     1 <NA>    3\n           hd\n88    Healthy\n167   Healthy\n193 Unhealthy\n267 Unhealthy\n288   Healthy\n303   Healthy\n```\n\n\n:::\n:::\n\n\n\njika kita mau, kita dapat mengaitkan nilai untuk `NA` menggunakan `random forest` atau metode lain. namun untuk contoh ini kita hanya akan menghapus sampel ini termasuk enam sampel dalam `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 303\n```\n\n\n:::\n\n```{.r .cell-code}\ndata <- data[!(is.na(data$ca) | is.na(data$thal)),]\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 297\n```\n\n\n:::\n:::\n\n\nada tiga ratus tiga sampel kemudian kita menghapus enam sampel yang memiliki `NA`, dan setelah menghapus sampel tersebut ada dua ratus sembilan puluh tujuh sampel yang tersisa.\n\nSekarang kita perlu memastikan bahwa sampel yang sehat dan berpenyakit berasal dari setiap jenis kelamin perempuan dan laki-laki.\n\njika hanya sampel laki-laki yang memiliki penyakit jantung, kita mungkin harus menghapus semua perempuan dari model tersebut. \n\nkita melakukan ini dengan fungsi `xtabs` kita meneruskan `xtabs` data dan menggunakan sintaks model untuk memilih kolom dalam data yang ingin kita buat tabelnya. Dalam hal ini kita menginginkan tabel dengan penyakit jantung dan `sex`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~ hd + sex, data=data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           sex\nhd            F   M\n  Healthy    71  89\n  Unhealthy  25 112\n```\n\n\n:::\n\n```{.r .cell-code}\n## Most of the females are healthy and most of the males are unhealthy.\n## Being female is likely to decrease the odds in being unhealthy.\n##    In other words, if a sample is female, the odds are against it that it\n##    will be unhealthy\n## Being male is likely to increase the odds in being unhealthy...\n##    In other words, if a sample is male, the odds are for it being unhealthy\n```\n:::\n\n\n\npasien sehat dan tidak sehat sama-sama diwakili oleh banyak sampel wanita dan pria singkatnya dilaporkan oleh sekelompok pasien.\n\n\n\n::: {.cell}\n\n```{.shell .cell-code}\n## Most of the females are healthy and most of the males are unhealthy.\n## Being female is likely to decrease the odds in being unhealthy.\n##    In other words, if a sample is female, the odds are against it that it\n##    will be unhealthy\n## Being male is likely to increase the odds in being unhealthy...\n##    In other words, if a sample is male, the odds are for it being unhealthy\n```\n:::\n\n\n\nsekarang mari kita verifikasi bahwa keempat tingkat nyeri dada `CP`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Now we can do some quality control by making sure all of the factor\n## levels are represented by people with and without heart disease (hd)\n##\n## NOTE: We also want to exclude variables that only have 1 or 2 samples in\n## a category since +/- one or two samples can have a large effect on the\n## odds/log(odds)\n\nxtabs(~ hd + cp, data=data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           cp\nhd            1   2   3   4\n  Healthy    16  40  65  39\n  Unhealthy   7   9  18 103\n```\n\n\n:::\n:::\n\n\n\nKemudian kita melakukan hal yang sama untuk semua variabel `boolean` dan `categoric` yang kita gunakan untuk memprediksi penyakit jantung.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~ hd + fbs, data=data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           fbs\nhd            0   1\n  Healthy   137  23\n  Unhealthy 117  20\n```\n\n\n:::\n\n```{.r .cell-code}\nxtabs(~ hd + restecg, data=data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           restecg\nhd           0  1  2\n  Healthy   92  1 67\n  Unhealthy 55  3 79\n```\n\n\n:::\n:::\n\n\n\nInilah sesuatu yang dapat menyebabkan masalah pada hasil istirahat elektrokardiografi.  Hanya 4 pasien yang mewakili level 1, hal ini berpotensi menghalangi pencarian jalur yang paling pas (*fit*). Namun untuk saat ini kita hanya akan membiarkannya dan melihat apa yang terjadi dan kemudian kita terus melihat variabel yang tersisa untuk memastikan bahwa semuanya diwakili oleh sejumlah pasien. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~ hd + exang, data=data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           exang\nhd            0   1\n  Healthy   137  23\n  Unhealthy  63  74\n```\n\n\n:::\n\n```{.r .cell-code}\nxtabs(~ hd + slope, data=data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           slope\nhd            1   2   3\n  Healthy   103  48   9\n  Unhealthy  36  89  12\n```\n\n\n:::\n\n```{.r .cell-code}\nxtabs(~ hd + ca, data=data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           ca\nhd            0   1   2   3\n  Healthy   129  21   7   3\n  Unhealthy  45  44  31  17\n```\n\n\n:::\n\n```{.r .cell-code}\nxtabs(~ hd + thal, data=data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           thal\nhd            3   6   7\n  Healthy   127   6  27\n  Unhealthy  37  12  88\n```\n\n\n:::\n:::\n\n\n\noke kita sudah melakukan semua hal yang membosankan sekarang mari kita lakukan regresi logistik mari kita mulai dengan model yang sangat sederhana.\n\nkita akan mencoba memprediksi penyakit jantung hanya dengan menggunakan jenis kelamin setiap pasien. inilah `code call` kita ke fungsi GLM fungsi yang menjalankan **G**eneralized **L**inear **M**odels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic <- glm(hd ~ sex, data=data, family=\"binomial\")\n```\n:::\n\n\n\npertama kita menggunakan rumus sintaks untuk menentukan bahwa kita ingin menggunakan jenis kelamin untuk memprediksi penyakit jantung. Kita ingin menggunakan jenis kelamin untuk memprediksi penyakit jantung kemudian kita menentukan data yang kita gunakan untuk model tersebut. Terakhir kita menetapkan bahwa kita menginginkan keluarga binomial dari model linier umum, hal ini membuat fungsi GLM melakukan regresi logistik dibandingkan dengan beberapa jenis model linier umum lainnya.\n\nOh, saya hampir lupa menyebutkan bahwa kita menyimpan output dari fungsi GLM dalam variabel yang disebut logistic. kita kemudian menggunakan fungsi ringkasan untuk mendapatkan detail tentang regresi logistik.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(logistic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = hd ~ sex, family = \"binomial\", data = data)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  -1.0438     0.2326  -4.488 7.18e-06 ***\nsexM          1.2737     0.2725   4.674 2.95e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 409.95  on 296  degrees of freedom\nResidual deviance: 386.12  on 295  degrees of freedom\nAIC: 390.12\n\nNumber of Fisher Scoring iterations: 4\n```\n\n\n:::\n\n```{.r .cell-code}\n## The intercept is the log(odds) a female will be unhealthy. This is because\n## female is the first factor in \"sex\" (the factors are ordered,\n## alphabetically by default,\"female\", \"male\")\n```\n:::\n\n\n\n1. baris pertama memiliki panggilan asli ke fungsi GLM \n2. baris kedua memberi ringkasan `deviance residuals`.\nmereka terlihat bagus karena hampir berpusat pada nol dan kira-kira simetris .\n\njika Anda ingin tahu lebih banyak tentang `deviance residuals`, lihat modul [deviance residuals](devianceresidual.qmd) yang dijelaskan dengan jelas.\n\n- kemudian kita memiliki koefisien. Mereka bersesuaiaian dengan model. \n\n$$\n\\text{heart disease} = -1.0438 + 1.2737 \\times \\text{pasien laki-laki}\n$$\nVariabel pasien laki-laki sama dengan nol ketika pasien perempuan dan satu ketika pasien laki-laki.\n\n- jadi jika kita memprediksi penyakit jantung untuk pasien wanita kita. kita mendapatkan persamaan berikut.\n\n$$\n\\text{heart disease} = -1.0438 + 1.2737 \\times 0 = -1.0438\n$$\nOleh karena itu, kemungkinan log (odds) bahwa seorang wanita memiliki penyakit jantung $ = -1.0438 $.\n\njika kita memprediksi penyakit jantung untuk pasien laki-laki, kita mendapatkan persamaan berikut\n$$\n\\text{heart disease} = -1.0438 + 1.2737 \\times 1 = -1.0438 + 1.2737\n$$\nkarena persamaan pertama adalah log(odds) seorang wanita terkena penyakit jantung, \npersamaan kedua menunjukkan peningkatan log(odds) seorang pria terkena penyakit jantung.\n\nDengan kata lain, suku persamaan kedua adalah log **rasio** peluang seorang **pria** terkena penyakit jantung terhadap kemungkinan seorang **wanita** terkena penyakit jantung. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfemale.log.odds <- log(25 / 71)\nfemale.log.odds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.043804\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfemale.log.odds <- log(25 / 71)\nfemale.log.odds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.043804\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## sexM is the log(odds ratio) that tells us that if a sample has sex=M, the\n## odds of being unhealthy are, on a log scale, 1.27 times greater than if\n## a sample has sex=F.\nmale.log.odds.ratio <- log((112 / 89) / (25/71))\nmale.log.odds.ratio\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.273667\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(logistic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = hd ~ sex, family = \"binomial\", data = data)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  -1.0438     0.2326  -4.488 7.18e-06 ***\nsexM          1.2737     0.2725   4.674 2.95e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 409.95  on 296  degrees of freedom\nResidual deviance: 386.12  on 295  degrees of freedom\nAIC: 390.12\n\nNumber of Fisher Scoring iterations: 4\n```\n\n\n:::\n:::\n\n\n\n3. Bagian `Std. Error` dan `z Value` dari keluaran regresi logistik ini menunjukkan bagaimana **Wald** dihitung untuk kedua koefisien dan ini adalah `P-Value`.\n\nkedua `P-Value` jauh di bawah 0,05 dan dengan demikian `log(odds)` dan `log(odds_ratio)` keduanya **signifikan secara statistik** tetapi ingat `P-Value` yang kecil saja tidak *menentukan*.\n\nkita juga menginginkan ukuran **efek** yang besar dan itulah yang dikatakan oleh `log(odds)` dan `log(odds_ratio)`.\n\nJika Anda ingin mengetahui detail lebih lanjut tentang \n\n- `koefisien` dan `uji Wald`, lihat [modul](regresilogistic.qmd) berikut dan \n- `log(odds)` dijelaskan dengan jelas - [`odds_ratio`](regresilogistic.qmd) dan \n- `log(odds_ratio)` dijelaskan dengan jelas dalam detail [regresi logistik bagian 1](regresilogistic.qmd).\n\n4. selanjutnya kita melihat parameter dispersi default yang digunakan untuk regresi logistik ini. \n\nKetika kita melakukan regresi linier sederhana, kita memperkirakan mean dan varians dari data yang berbeda. \n\nSecara kontras, ketika regresi logistik kita memperkirakan rata-rata data sedangkan varians diturunkan dari mean. \nKarena kita tidak memperkirakan varians dari data dan sebaliknya hanya menurunkannya dari mean ada kemungkinan varians tersebut `underestimated`. \nKalau begitu, Anda dapat menyesuaikan dispersi kita di dalam `summary` command.\n\n5. Kita memiliki `Null deviance` dan `Residual Deviance`. Ini dapat digunakan untuk membandingkan model yang menghitung `$R^2$` dan keseluruhan `p-value`.\n\nuntuk detail lebih lanjut, lihat detail [regresi logistik](regresilogistic.qmd) `$R^2$` dan `p-value`-nya dan [Saturated Models dan Deviance Statistics](regresilogistic.qmd) dijelaskan dengan jelas.\n\n6. kemudian kita memiliki AIC (Akaike Information Criterion) yang dalam konteks ini hanyalah `Residual Deviance` yang **disesuaikan** dengan jumlah parameter dalam model. **AIC** dapat digunakan untuk membandingkan satu model dengan model lainnya.\n\n7. terakhir, kita memiliki `Number of Fisher Scoring Iteration` yang hanya memberi tahu kita seberapa cepat fungsi `GLM` *coverge* pada **Maximum Likelihood Estimates** untuk koefisien.\n\njika Anda ingin detail lebih lanjut tentang bagaimana koefisien diestimasi, lihat detail [regresi logistik bagian kedua](logisticregression.qmd) **...menyesuaikan garis dengan kemungkinan maksimum**.\n\nsekarang kita telah melakukan regresi logistik sederhana hanya dengan menggunakan salah satu variabel\n(**`sex`**) untuk memprediksi penyakit jantung, kita dapat membuat model *fancy* yang menggunakan semua variabel untuk memprediksi penyakit jantung sintaks dengan rumus ini.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#####################################\n##\n## Now we will use all of the data available to predict heart disease\n##\n#####################################\n \nlogistic <- glm(hd ~ ., data=data, family=\"binomial\")\n```\n:::\n\n\n**`.`** berarti kita ingin memodelkan HD penyakit jantung menggunakan semua variabel dalam data frame kita yang disebut data, kita kemudian dapat melihat seperti apa model kita dengan fungsi `summary`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(logistic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = hd ~ ., family = \"binomial\", data = data)\n\nCoefficients:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -6.253978   2.960399  -2.113 0.034640 *  \nage         -0.023508   0.025122  -0.936 0.349402    \nsexM         1.670152   0.552486   3.023 0.002503 ** \ncp2          1.448396   0.809136   1.790 0.073446 .  \ncp3          0.393353   0.700338   0.562 0.574347    \ncp4          2.373287   0.709094   3.347 0.000817 ***\ntrestbps     0.027720   0.011748   2.359 0.018300 *  \nchol         0.004445   0.004091   1.087 0.277253    \nfbs1        -0.574079   0.592539  -0.969 0.332622    \nrestecg1     1.000887   2.638393   0.379 0.704424    \nrestecg2     0.486408   0.396327   1.227 0.219713    \nthalach     -0.019695   0.011717  -1.681 0.092781 .  \nexang1       0.653306   0.447445   1.460 0.144267    \noldpeak      0.390679   0.239173   1.633 0.102373    \nslope2       1.302289   0.486197   2.679 0.007395 ** \nslope3       0.606760   0.939324   0.646 0.518309    \nca1          2.237444   0.514770   4.346 1.38e-05 ***\nca2          3.271852   0.785123   4.167 3.08e-05 ***\nca3          2.188715   0.928644   2.357 0.018428 *  \nthal6       -0.168439   0.810310  -0.208 0.835331    \nthal7        1.433319   0.440567   3.253 0.001141 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 409.95  on 296  degrees of freedom\nResidual deviance: 183.10  on 276  degrees of freedom\nAIC: 225.1\n\nNumber of Fisher Scoring iterations: 6\n```\n\n\n:::\n:::\n\n\n\nkita melihat bahwa usia bukanlah prediktor yang berguna karena memiliki `p-value` yang **besar**. Namun `rata-rata` usia dalam dataframe kita adalah $56$ tahun. Jadi sebagian besar orang sudah cukup tua dan itu menjelaskan mengapa usia tidak terlalu **berguna**.\n\n`Gender` masih merupakan prediktor yang **baik**. Meskipun begitu, kita melihat bahwa `residual deviance` dan `AIC` keduanya jauh lebih **kecil** untuk model *fancy* ini daripada fungsi untuk model sederhana yakni ketika kita hanya menggunakan **jenis kelamin** untuk memprediksi **penyakit jantung**.\n\njika kita ingin menghitung **pseudo r-squared McFadden**, kita dapat mengambil **log-likelihood null model** dari variabel **logistik**, dengan mendapatkan nilai **null deviance** dan membaginya dengan $-2$,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Now calculate the overall \"Pseudo R-squared\" and its p-value\n \n## NOTE: Since we are doing logistic regression...\n## Null devaince = 2*(0 - LogLikelihood(null model))\n##               = -2*LogLikihood(null model)\n## Residual deviacne = 2*(0 - LogLikelihood(proposed model))\n##                   = -2*LogLikelihood(proposed model)\nll.null <- logistic$null.deviance/-2\n```\n:::\n\n\n\ndan kita dapat mengambil **log-likelihood null model** untuk model *fancy* dari variabel **logistik** dengan mendapatkan nilai **residual deviance** dan membaginya dengan $-2$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Now calculate the overall \"Pseudo R-squared\" and its p-value\n \n## NOTE: Since we are doing logistic regression...\n## Null devaince = 2*(0 - LogLikelihood(null model))\n##               = -2*LogLikihood(null model)\n## Residual deviacne = 2*(0 - LogLikelihood(proposed model))\n##                   = -2*LogLikelihood(proposed model)\nll.proposed <- logistic$deviance/-2\n```\n:::\n\n\n\nkemudian kita hanya menghitung dan kita mendapatkan **pseudo r-squared McFadden** $= 0,55$. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## McFadden's Pseudo R^2 = [ LL(Null) - LL(Proposed) ] / LL(Null)\n(ll.null - ll.proposed) / ll.null\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5533531\n```\n\n\n:::\n:::\n\n\n\nini dapat diartikan sebagai ukuran **`efek` keseluruhan** dan kita dapat menggunakan **log-likelihood** yang sama untuk menghitung `p-value` untuk `$R^2$` tersebut menggunakan distribusi **Chi-Square** dalam hal ini `p-value` kecil sehingga nilai `$R^2$` bukan karena keberuntungan yang bodoh.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## chi-square value = 2*(LL(Proposed) - LL(Null))\n## The p-value for the R^2\n1 - pchisq(2*(ll.proposed - ll.null), df=(length(logistic$coefficients)-1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n1 - pchisq((logistic$null.deviance - logistic$deviance), df=(length(logistic$coefficients)-1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n## p-value = 1 - pchisq(chi-square value, df = 2-1)\n#1 - pchisq(2*(ll.proposed - ll.null), df=1)\n#1 - pchisq((logistic$null.deviance - logistic$deviance), df=1)\n\n## Lastly, let's  see what this logistic regression predicts, given\n## that a patient is either female or male (and no other data about them).\npredicted.data <- data.frame(\n  probability.of.hd=logistic$fitted.values,\n  sex=data$sex)\n```\n:::\n\n\n\nDetail lebih lanjut tentang `$R^2$` dan `p-value` dapat ditemukan di [logistic regression details](regresilogistic.qmd) bagian `$R^2$` dan `p-value`.\n\nTerakhir kita dapat menggambar grafik yang menunjukkan probabilitas yang diprediksi bahwa setiap pasien memiliki penyakit jantung seiring dengan status penyakit jantung yang mereka miliki.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## We can plot the data...\nggplot(data=predicted.data, aes(x=sex, y=probability.of.hd)) +\n  geom_point(aes(color=sex), size=5) +\n  xlab(\"Sex\") +\n  ylab(\"Predicted probability of getting heart disease\")\n```\n\n::: {.cell-output-display}\n![](modul6_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## Since there are only two probabilities (one for females and one for males),\n## we can use a table to summarize the predicted probabilities.\nxtabs(~ probability.of.hd + sex, data=predicted.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     sex\nprobability.of.hd     F M\n  0.00109849687364516 1 0\n  0.00257595371589279 1 0\n  0.00302860987165499 1 0\n  0.00309742157453941 1 0\n  0.00316552701639565 1 0\n  0.0036173662362176  1 0\n  0.00424728930168456 1 0\n  0.004252341397993   1 0\n  0.00458417821874386 1 0\n  0.0055715691281947  1 0\n  0.00612498312810293 1 0\n  0.00732920502686092 1 0\n  0.00798129825868711 1 0\n  0.00821700650426802 1 0\n  0.00835492978391896 1 0\n  0.0090345742813764  1 0\n  0.0102421214716949  1 0\n  0.0110000338134468  1 0\n  0.0113857038790058  0 1\n  0.0119829653935482  1 0\n  0.0129839840898876  1 0\n  0.0132010374672948  1 0\n  0.0141501041600713  0 1\n  0.0144510378661266  0 1\n  0.0145542087033473  0 1\n  0.0150339481250764  1 0\n  0.0158412350206649  0 1\n  0.0158757921057526  1 0\n  0.0163581355975179  0 1\n  0.016419911634928   0 1\n  0.0167460183841822  0 1\n  0.0190015918666313  1 0\n  0.0190266058956531  1 0\n  0.0194413243424079  1 0\n  0.0212397745714133  0 1\n  0.0229666682951821  0 1\n  0.0234657185428947  0 1\n  0.0236604112915081  1 0\n  0.0238167919846595  1 0\n  0.0249489781010545  1 0\n  0.0250971117932175  0 1\n  0.0262539988650925  1 0\n  0.0285145909079672  1 0\n  0.0286625790957844  1 0\n  0.0287950230604837  0 1\n  0.03037420675039    1 0\n  0.0309572735380999  1 0\n  0.0311566200786876  0 1\n  0.0314432385823954  0 1\n  0.0336251680707966  0 1\n  0.0355198593538869  0 1\n  0.0366238014259639  0 1\n  0.0367647167117863  1 0\n  0.0386514722522503  0 1\n  0.0391214089398116  1 0\n  0.0410922083688951  0 1\n  0.041439655434854   1 0\n  0.0430109609043515  1 0\n  0.04367053603076    1 0\n  0.0437225372526803  1 0\n  0.0440712130839445  1 0\n  0.0452121237382874  1 0\n  0.0465775926224517  0 1\n  0.0490190635751614  0 1\n  0.0491266441808808  0 1\n  0.0508426014065071  1 0\n  0.0508810224168613  1 0\n  0.0514768857230768  0 1\n  0.052258068609248   0 1\n  0.0523329737612425  0 1\n  0.0558810524873025  0 1\n  0.056834143513995   0 1\n  0.0573839959190046  0 1\n  0.0583873956994075  0 1\n  0.0587245196686592  1 0\n  0.0598220299171169  0 1\n  0.062099415895352   0 1\n  0.0622084822411599  0 1\n  0.0644149704119884  0 1\n  0.0663940933217283  1 0\n  0.0663993133043969  1 0\n  0.066924128810457   0 1\n  0.0799839139207208  1 0\n  0.0896929021776774  1 0\n  0.091311778029208   0 1\n  0.0924348053526441  1 0\n  0.0961869627789141  1 0\n  0.096559426661432   0 1\n  0.104585965563636   0 1\n  0.105461312926022   0 1\n  0.110839079905231   0 1\n  0.110915898255908   0 1\n  0.111011538132575   1 0\n  0.113609757343521   0 1\n  0.114492942195124   0 1\n  0.116842845453753   0 1\n  0.124269406166327   0 1\n  0.126544057761247   1 0\n  0.130489782221405   0 1\n  0.138707035572436   1 0\n  0.139632265793722   0 1\n  0.140838233391067   1 0\n  0.142744928155097   1 0\n  0.142803306424549   0 1\n  0.145321481619698   1 0\n  0.154759366190523   0 1\n  0.157514867215368   0 1\n  0.158988022312673   0 1\n  0.160933162511404   1 0\n  0.161325645912614   0 1\n  0.163686615140895   0 1\n  0.16891743464227    1 0\n  0.182860431522722   0 1\n  0.187798107412366   1 0\n  0.207789639077226   0 1\n  0.209015413260763   1 0\n  0.212072900541564   0 1\n  0.214730318385278   1 0\n  0.222771394627878   0 1\n  0.224006063963778   1 0\n  0.227745780140376   1 0\n  0.228054267741691   0 1\n  0.239284007626666   0 1\n  0.241638846352508   0 1\n  0.248886621454535   0 1\n  0.250309803525568   1 0\n  0.254486059487984   0 1\n  0.260147992666944   1 0\n  0.260211313582116   0 1\n  0.270926284230502   0 1\n  0.273754102353528   0 1\n  0.274486678472416   0 1\n  0.277710691706252   0 1\n  0.278686451963224   1 0\n  0.280420159791897   0 1\n  0.28213252291425    1 0\n  0.284808944916844   0 1\n  0.288415392116847   0 1\n  0.290319802806465   1 0\n  0.290656356340781   0 1\n  0.306943077761505   0 1\n  0.311482759100001   0 1\n  0.312001019774412   1 0\n  0.321379987652644   0 1\n  0.324438352928596   1 0\n  0.348367591872858   1 0\n  0.352439406579044   1 0\n  0.361345491709285   0 1\n  0.365212639286825   0 1\n  0.367992856225714   1 0\n  0.368698797256461   1 0\n  0.37667186598856    0 1\n  0.377552339146292   0 1\n  0.381366127903862   0 1\n  0.382113408855146   0 1\n  0.38673600054482    0 1\n  0.38706254718615    1 0\n  0.391477771446765   0 1\n  0.399258886071222   0 1\n  0.422661163229807   0 1\n  0.432020604805412   0 1\n  0.438010086324275   0 1\n  0.445261104770905   0 1\n  0.450309481745517   0 1\n  0.450534711787278   1 0\n  0.451753243490256   0 1\n  0.469440882870818   0 1\n  0.475457614278839   0 1\n  0.47943697237974    0 1\n  0.480560386782782   0 1\n  0.492615945542668   0 1\n  0.509159663847104   0 1\n  0.52277745210901    0 1\n  0.541141848438452   0 1\n  0.544980767718397   0 1\n  0.545109373133998   0 1\n  0.545390099142261   0 1\n  0.546140317975364   0 1\n  0.547420365803636   0 1\n  0.570442122864816   0 1\n  0.578952477298274   0 1\n  0.631198562161651   0 1\n  0.647739412692096   0 1\n  0.658242621846726   0 1\n  0.684782513929224   1 0\n  0.687452168310232   0 1\n  0.70248880783581    0 1\n  0.705874158517764   0 1\n  0.708644163082159   0 1\n  0.717750550408683   0 1\n  0.719224535252244   1 0\n  0.72005769588199    0 1\n  0.728266034396439   1 0\n  0.750503476070541   0 1\n  0.751145818144816   0 1\n  0.754971450824077   0 1\n  0.770892650822427   0 1\n  0.775235459955928   0 1\n  0.796637679798201   1 0\n  0.800662839378138   0 1\n  0.806879666034612   1 0\n  0.811489542804712   1 0\n  0.81216422254804    0 1\n  0.813179938467691   0 1\n  0.813804721189549   0 1\n  0.824574972085284   0 1\n  0.826936305100827   0 1\n  0.845142336159083   0 1\n  0.849972280247194   0 1\n  0.853137161783436   0 1\n  0.856640939423002   0 1\n  0.865310778796839   0 1\n  0.866587227490961   0 1\n  0.880856759614595   0 1\n  0.888731337279975   1 0\n  0.889990950377614   0 1\n  0.894275652973582   0 1\n  0.898795127851473   0 1\n  0.900556819701189   0 1\n  0.913251802637605   1 0\n  0.916958660271168   0 1\n  0.920857416507447   0 1\n  0.922972892897101   0 1\n  0.923564289790845   0 1\n  0.925103473375611   0 1\n  0.92538048837472    1 0\n  0.926670249647006   0 1\n  0.932562076418011   0 1\n  0.940551673245513   0 1\n  0.941739080251273   0 1\n  0.943991082194031   0 1\n  0.954226066930809   0 1\n  0.954699941321568   0 1\n  0.954869282725921   0 1\n  0.957285535359092   0 1\n  0.958591574115299   0 1\n  0.962311675299815   0 1\n  0.962665557808326   1 0\n  0.964616179254019   1 0\n  0.967083158492448   0 1\n  0.972585443725781   0 1\n  0.973118236613765   0 1\n  0.974849358728931   0 1\n  0.974864179016031   1 0\n  0.975154296989085   0 1\n  0.975923511872864   0 1\n  0.976316797250771   0 1\n  0.976863952714786   1 0\n  0.980524845402496   0 1\n  0.981052201584332   0 1\n  0.98129752479769    0 1\n  0.981593207229319   0 1\n  0.981856493751978   0 1\n  0.982652584859067   0 1\n  0.983817695154674   1 0\n  0.984232291394245   1 0\n  0.984513939155071   0 1\n  0.985418186890805   0 1\n  0.986597517143917   0 1\n  0.986804485638748   0 1\n  0.986878593097864   0 1\n  0.987235288448108   0 1\n  0.987553136341569   0 1\n  0.988237660078016   1 0\n  0.988632504331469   0 1\n  0.989466670937826   0 1\n  0.989498212732539   1 0\n  0.990420853263466   0 1\n  0.990686567185108   0 1\n  0.992386273612647   0 1\n  0.993102290185761   0 1\n  0.993376136192944   0 1\n  0.993471762504122   0 1\n  0.993897346285488   0 1\n  0.994017714835227   0 1\n  0.994109137892823   0 1\n  0.994384275170445   0 1\n  0.994429272052204   0 1\n  0.994568332042835   0 1\n  0.994621317393877   0 1\n  0.994884640329228   1 0\n  0.994921517669052   0 1\n  0.995593851495599   0 1\n  0.996285859662292   0 1\n  0.996938268641653   0 1\n  0.997135274510168   0 1\n  0.997439675632816   0 1\n  0.997935717327889   0 1\n  0.99805927561475    0 1\n  0.99809095901409    0 1\n  0.998313153430203   0 1\n  0.998418346757509   1 0\n  0.998657002941138   0 1\n  0.998862240850775   0 1\n  0.998977158173268   0 1\n  0.99906284448998    0 1\n  0.999172369060652   0 1\n```\n\n\n:::\n:::\n\n\n\nSebagian besar pasien dengan penyakit jantung yang ada di warna **Turqoise** diprediksi memiliki kemungkinan Tinggi terkena penyakit jantung & Sebagian besar pasien tanpa penyakit jantung yang ada di **salmon** diprediksi memiliki kemungkinan rendah terkena penyakit jantung sehingga regresi logistik kita telah melakukan pekerjaan yang cukup baik.\n\nNamun, kita dapat menggunakan **cross validation** untuk mendapatkan ide yang lebih baik tentang seberapa baik kinerjanya dengan data baru. Tetapi kita akan menyimpannya untuk kesempatan lain.\n\n- Untuk menggambar grafik kita mulai dengan membuat data frame baru yang berisi probabilitas terkena penyakit jantung bersama dengan status penyakit jantung yang sebenarnya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## now we can plot the data\npredicted.data <- data.frame(\n  probability.of.hd=logistic$fitted.values,\n  hd=data$hd)\n```\n:::\n\n\n\n- kemudian kita mengurutkan data frame dari probabilitas rendah ke tinggi probabilitas \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted.data <- predicted.data[\n  order(predicted.data$probability.of.hd, decreasing=FALSE),]\n```\n:::\n\n\n\n- kemudian kita tambahkan kolom baru ke data frame yang memiliki **rank** masing-masing sampel, dari probabilitas rendah ke probabilitas tinggi\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted.data$rank <- 1:nrow(predicted.data)\n```\n:::\n\n\n\n- kemudian kita memuat library `**ggplot2**` sehingga kita dapat menggambar grafik yang bagus \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n- kemudian kita memuat library `**cowplot**` sehingga`**ggplot2**` memiliki tampilan yang bagus secara defaults\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n:::\n\n\n- kemudian kita memanggil `ggplot()` dan menggunakan `geom_point()` untuk menggambar data dan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Lastly, we can plot the predicted probabilities for each sample having\n## heart disease and color by whether or not they actually had heart disease\nggplot(data=predicted.data, aes(x=rank, y=probability.of.hd)) +\n  geom_point(aes(color=hd), alpha=1, shape=4, stroke=2) +\n  xlab(\"Index\") +\n  ylab(\"Predicted probability of getting heart disease\")\n```\n\n::: {.cell-output-display}\n![](modul6_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n- terakhir kita memanggil `ggsave()` untuk menyimpan grafik sebagai file PDF triple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"heart_disease_probabilities.pdf\")\n```\n:::\n",
    "supporting": [
      "modul6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}