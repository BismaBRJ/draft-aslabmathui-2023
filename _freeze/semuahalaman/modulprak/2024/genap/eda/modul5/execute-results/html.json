{
  "hash": "135adfd3a08f3c49b25a2c14387bc544",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Pertemuan 5 : Time Series Visualization'\nimage: static\\images\\timeseries.png\ndescription: Handling time series data\ndate: 05/07/2024\npage-navigation: true\nformat: html\n---\n\nKembali ke [EDA](./eda2024genap.qmd)\n\n# `datetime` object\n\n::: {#fcfcb60a .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/farhanage/dataset-for-study/main/Electric_Production.csv', names=['date', 'electric_production'], header=0)\n\ndf.head(15)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>electric_production</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1/1/1985</td>\n      <td>72.5052</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2/1/1985</td>\n      <td>70.6720</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3/1/1985</td>\n      <td>62.4502</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4/1/1985</td>\n      <td>57.4714</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5/1/1985</td>\n      <td>55.3151</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6/1/1985</td>\n      <td>58.0904</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7/1/1985</td>\n      <td>62.6202</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8/1/1985</td>\n      <td>63.2485</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9/1/1985</td>\n      <td>60.5846</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10/1/1985</td>\n      <td>56.3154</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11/1/1985</td>\n      <td>58.0005</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12/1/1985</td>\n      <td>68.7145</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1/1/1986</td>\n      <td>73.3057</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>2/1/1986</td>\n      <td>67.9869</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>3/1/1986</td>\n      <td>62.2221</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6ad972d0 .cell execution_count=2}\n``` {.python .cell-code}\n# Mengecek tipe data tiap kolom\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 397 entries, 0 to 396\nData columns (total 2 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   date                 397 non-null    object \n 1   electric_production  397 non-null    float64\ndtypes: float64(1), object(1)\nmemory usage: 6.3+ KB\n```\n:::\n:::\n\n\nPerhatikan bahwa kolom date memiliki tipe data `object` (string). Pada pertemuan ini, kita akan membahas suatu tipe data baru yang bernama `datetime` yang digunakan untuk memanipulasi data runtun waktu (time series).\n\n## Converting `object` to `datetime`\n\nPerhatikan code cell berikut untuk mengubah data bertipe `object` menjadi `datetime`\n\n::: {#8a6e304f .cell execution_count=3}\n``` {.python .cell-code}\n# Mengubah data `object` -> `datetime`\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%Y')\n```\n:::\n\n\n:::{.callout-note}\n# Date Format\n\nArgumen `format='%m/%d/%Y'` digunakan untuk membaca format penanggalan yang tertulis pada kolom yang ingin kita ubah. `%d` menandakan hari, `%m` untuk bulan, `%y` untuk tahun 2 digit dan `%Y` untuk tahun 4 digit.\n\n```\ne.g. : '2024-05-26' -> '%Y-%m-%d'\n```\n:::\n\n::: {#44cbb53c .cell execution_count=4}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 397 entries, 0 to 396\nData columns (total 2 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   date                 397 non-null    datetime64[ns]\n 1   electric_production  397 non-null    float64       \ndtypes: datetime64[ns](1), float64(1)\nmemory usage: 6.3 KB\n```\n:::\n:::\n\n\nTerlihat bahwa kolom `date` kini memiliki tipe data `datetime64[ns]`.\n\n::: {#ec078f3d .cell execution_count=5}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>electric_production</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1985-01-01</td>\n      <td>72.5052</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1985-02-01</td>\n      <td>70.6720</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1985-03-01</td>\n      <td>62.4502</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1985-04-01</td>\n      <td>57.4714</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1985-05-01</td>\n      <td>55.3151</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTerlihat setelah dilakukan perubahan tipe data, format penanggalan pada kolom `date` juga berubah.\n\n# Apa perbedaan `string` dan `datetime`?\n\nObject `datetime` memiliki attribut tanggal, bulan, waktu, hari, jam, menit, bahkan detik suatu observasi yang dapat kita akses melalui library datetime.\n\n::: {#798c0a10 .cell execution_count=6}\n``` {.python .cell-code}\n# Ambil tahun dari setiap observasi\ndf['date'].dt.year\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0      1985\n1      1985\n2      1985\n3      1985\n4      1985\n       ... \n392    2017\n393    2017\n394    2017\n395    2017\n396    2018\nName: date, Length: 397, dtype: int32\n```\n:::\n:::\n\n\n::: {#8d80cea4 .cell execution_count=7}\n``` {.python .cell-code}\n# Ambil Bulan dari setiap observasi\ndf['date'].dt.month\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n0       1\n1       2\n2       3\n3       4\n4       5\n       ..\n392     9\n393    10\n394    11\n395    12\n396     1\nName: date, Length: 397, dtype: int32\n```\n:::\n:::\n\n\n::: {#f1d4b2ce .cell execution_count=8}\n``` {.python .cell-code}\n# Ambil Tanggal dari setiap observasi\ndf['date'].dt.day\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0      1\n1      1\n2      1\n3      1\n4      1\n      ..\n392    1\n393    1\n394    1\n395    1\n396    1\nName: date, Length: 397, dtype: int32\n```\n:::\n:::\n\n\nobject `datetime` dapat digunakan sebagai nilai numerik dalam visualisasi data\n\n::: {#44cfcc45 .cell execution_count=9}\n``` {.python .cell-code}\nsns.lineplot(x='date', y='electric_production', data=df)\n\nplt.title('Jumlah produksi listrik per tahun (1985-2018)')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul5_files/figure-html/cell-10-output-1.png){width=593 height=449}\n:::\n:::\n\n\n# Grouping\n\nBagaimana cara kita memanfaatkan attribut-attribut datetime? Gunakan grouping method (`groupby`) untuk mendapatkan insight baru dari data per satuan waktu tertentu.\n\n**Informasi jumlah total produksi energi per tahunnya**\n\n::: {#08ea3d52 .cell execution_count=10}\n``` {.python .cell-code}\ndf['electric_production'].groupby(df['date'].dt.year).sum() # sum of electric_production, grouped by year\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\ndate\n1985     745.9880\n1986     752.5187\n1987     788.8833\n1988     836.5963\n1989     862.7420\n1990     879.7612\n1991     901.3422\n1992     901.4509\n1993     932.1479\n1994     951.0607\n1995     984.7304\n1996    1012.5890\n1997    1010.8343\n1998    1038.5289\n1999    1070.2907\n2000    1101.4815\n2001    1097.5295\n2002    1129.2849\n2003    1148.4013\n2004    1165.4307\n2005    1190.4989\n2006    1186.4787\n2007    1223.8100\n2008    1219.9679\n2009    1185.9574\n2010    1231.1626\n2011    1227.4857\n2012    1199.9999\n2013    1228.0482\n2014    1244.7934\n2015    1236.6349\n2016    1233.1725\n2017    1223.3381\n2018     129.4048\nName: electric_production, dtype: float64\n```\n:::\n:::\n\n\n**Informasi rata-rata produksi energi setiap bulan selama 33 tahun terakhir**\n\n::: {#1d6517f6 .cell execution_count=11}\n``` {.python .cell-code}\ndf['electric_production'].groupby(df['date'].dt.month).mean() # mean of electric_production, grouped by month\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ndate\n1     102.100241\n2      94.095521\n3      87.902691\n4      79.134518\n5      79.414367\n6      87.415906\n7      94.944915\n8      95.169848\n9      86.484391\n10     80.209121\n11     83.135879\n12     95.757606\nName: electric_production, dtype: float64\n```\n:::\n:::\n\n\n## Plots\n\n::: {#0ae8df07 .cell execution_count=12}\n``` {.python .cell-code}\nsum_per_year = df['electric_production'].groupby(df['date'].dt.year).sum() # sum of electric_production, grouped by year\n\nsns.lineplot(sum_per_year)\n\nplt.title('Jumlah produksi listrik per tahun (1985-2018)')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul5_files/figure-html/cell-13-output-1.png){width=601 height=449}\n:::\n:::\n\n\nkenapa tahun 2018 turun drastis? cek semua observasi pada tahun 2018\n\n::: {#0ad23fd1 .cell execution_count=13}\n``` {.python .cell-code}\n# Ambil data dengan tahun == 2018\ndf[df['date'].dt.year == 2018]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>electric_production</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>396</th>\n      <td>2018-01-01</td>\n      <td>129.4048</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTernyata tahun 2018 hanya memiliki 1 observasi, sehingga tidak dapat dibandingkan dengan jumlah produksi tahun-tahun sebelumnya.\n\n::: {#15a145bd .cell execution_count=14}\n``` {.python .cell-code}\n# buang data tahun 2018\ndf.drop(df[df['date'].dt.year == 2018].index, axis=0, inplace=True)\n```\n:::\n\n\n::: {#ca6b018b .cell execution_count=15}\n``` {.python .cell-code}\ndf[df['date'].dt.year == 2018]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>electric_production</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nData sudah berhasil dibuang, sehingga dapat dilakukan visualisasi yang lebih akurat\n\n::: {#22753616 .cell execution_count=16}\n``` {.python .cell-code}\nsum_per_year = df['electric_production'].groupby(df['date'].dt.year).sum() # sum of electric_production, grouped by year\n\nsns.lineplot(sum_per_year)\n\nplt.xlabel('year')\n\nplt.ylabel('electric production')\n\nplt.title('Jumlah produksi listrik per tahun (1985-2017)')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul5_files/figure-html/cell-17-output-1.png){width=601 height=449}\n:::\n:::\n\n\nInterpretasinya?\n\n::: {#15d9f3e8 .cell execution_count=17}\n``` {.python .cell-code}\navg_per_month = df['electric_production'].groupby(df['date'].dt.month).mean() # mean of electric_production, grouped by month\n\nsns.barplot(avg_per_month)\n\nplt.xlabel('month')\n\nplt.ylabel('average electric production')\n\nplt.title('Rata-rata produksi listrik per bulan (1985-2017)')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul5_files/figure-html/cell-18-output-1.png){width=593 height=449}\n:::\n:::\n\n\nInterpretasi? Kaitkan dengan musim?\n\n# Case Study\n\nDownload dataset di sini : [Energy Time Series](https://drive.google.com/drive/folders/122UC_72nX8DocmqdmNfBIPXMmk3zr_EP?usp=sharing)\n\nMetadata :\n\n1. energy_reading.csv\n- `building_id` - Foreign key for the building metadata.\n- `meter` - The meter id code. Read as {0: electricity, 1: chilledwater, 2: steam, 3: hotwater}. Not every building has all meter types.\n- `timestamp` - When the measurement was taken\n- `meter_reading` - The target variable. Energy consumption in kWh (or equivalent). Note that this is real data with measurement error, which we expect will impose a baseline level of modeling error. UPDATE: as discussed here, the site 0 electric meter readings are in kBTU.\n\n2. building_metadata.csv\n- `site_id` - Foreign key for the weather files.\n- `building_id` - Foreign key for training.csv\n- `primary_use` - Indicator of the primary category of activities for the building based on EnergyStar property type definitions\n- `square_feet` - Gross floor area of the building\n- `year_built` - Year building was opened\n- `floor_count` - Number of floors of the building\n\n3. weather.csv\nWeather data from a meteorological station as close as possible to the site.\n- `site_id`\n- `air_temperature` - Degrees Celsius\n- `cloud_coverage` - Portion of the sky covered in clouds, in oktas\n- `dew_temperature` - Degrees Celsius\n- `precip_depth_1_hr` - Millimeters\n- `sea_level_pressure` - Millibar/hectopascals\n- `wind_direction` - Compass direction (0-360)\n- `wind_speed` - Meters per second\n\nChallenge : Gali informasi sebanyak-banyaknya dari data tersebut\n\n",
    "supporting": [
      "modul5_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}