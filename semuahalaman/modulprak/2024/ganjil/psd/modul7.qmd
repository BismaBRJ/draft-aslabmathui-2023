---
title: "(Pertemuan 07) Distribusi Sampling di R"
subtitle: "Sampling Distributions in R"
description: "Offline di Departemen Matematika"
date: 11/04/2024
page-navigation: true
format: html
---

Kembali ke [Pengantar Sains Data](./psd2024.qmd)

Kebetulan, materi modul kali ini adalah revisi dari [modul PSD tahun lalu](../../../2023/ganjil/psd/Pekan%203/modul3.qmd).

Dalam menganalisis suatu populasi secara statistik, apabila populasinya tidak kecil, realitanya kita tidak bisa memperoleh data yang benar-benar lengkap tentang keseluruhan populasi tersebut. Kita hanya bisa mengambil **sampel**, yaitu *subset* dari populasi. Sampel yang kita ambil diharapkan cukup "mewakili" data populasi, yaitu nilai-nilai statistiknya (baik ukuran pemusatan data, seperti rata-rata, maupun ukuran persebaran/keragaman data, seperti variansi) tidak berbeda jauh.

(Metode-metode pengambilan sampel dengan baik dipelajari di mata kuliah Sampling dan Rancangan Survey.)

Maksud istilah "statistik" di sini adalah perhitungan yang bisa dilakukan pada sembarang sampel. Misalnya, sampel apapun bisa dihitung rata-ratanya ataupun variansinya, sehingga rata-rata dan variansi termasuk statistik. Perhatikan bahwa "sampel" berupa sekumpulan data, bukan satu titik data saja.

Nilai statistik bergantung pada sampel. Dengan demikian, statistik bisa dipandang sebagai variabel acak, sehingga memiliki distribusi. Distribusi dari suatu statistik disebut ***sampling distribution*** atau **distribusi *sampling***.

Contoh: distribusi dari rata-rata disebut **distribusi *sample mean***.

Sebagaimana distribusi pada umumnya, distribusi *sampling* sebenarnya menggambarkan probabilitas memperoleh nilai statistik tertentu. Misalnya, distribusi *sample mean* menggambarkan probabilitas memperoleh nilai rata-rata tertentu dari sampel yang kebetulan kita miliki.

Dengan demikian, sejatinya, kita bisa membentuk distribusi *sampling* dengan **mencoba semua kemungkinan sampel** serta mendata probabilitas memperoleh tiap sampel tersebut, kemudian menghitung statistiknya untuk tiap sampel, barulah mendata semua nilai yang mungkin untuk statistik tersebut beserta probabilitasnya.

Namun, karena ada amat sangat banyak kemungkinan sampel, seringkali kita malah **memperkirakan** bentuk distribusi *sampling* tersebut melalui **simulasi**, yaitu mencoba mengambil sampel berkali-kali secara *random*, kemudian menghitung statistiknya di tiap sampel, barulah membentuk distribusi dari statistik tersebut.

Bagaimanapun juga, ketika membahas distribusi *sampling*, yang melibatkan pengambilan sampel hingga berkali-kali, tentu ada semacam konsep pengulangan.

Jangan lupa bahwa R adalah bahasa pemrograman, sehingga juga memiliki fitur pernyataan berulang, sebagaimana yang kalian pelajari di mata kuliah Algoritma dan Pemrograman, seperti di Python yang kalian pelajari di mata kuliah Praktikum Algoritma dan Pemrograman. Sebelum mempelajari distribusi *sampling* di R, kita perlu membahas itu dulu.

# Pengulangan *(looping)* di R

## *For loop*

```{r}
for (k in 1:5) {
  print(k*2)
}
```

```{r}
for (k in 1:5) {
  print(runif(1, min = 25, max = 100))
}
```

## Fungsi `replicate`

::: {.callout-warning}
Sintaks/penulisan kode seperti di bawah ini, yaitu dengan fungsi `replicate`, hanya berlaku di bahasa pemrograman R.

**Jangan gunakan `replicate` di mata kuliah Algoritma dan Pemrograman!**
:::

Mengeksekusi ulang fungsi/perintah yang diberikan, sebanyak yang kita minta, tanpa harus membuat *for loop*

```{r}
replicate(5,
          runif(1, min = 25, max = 100))
```

```{r}
replicate(5,
          runif(3, min = 25, max = 100))
```

## (Pengayaan) *While loop*, pernyataan kondisional

*(work in progress)*

# Distribusi *Sample Mean*

Untuk mempermudah urusan distribusi, mari kita aktifkan *package* `distr` dan `distrEx` yang sudah kita kenal sebelumnya

```{r}
library("distr")
library("distrEx")
```

## Dengan melakukan simulasi

Misalkan kita punya suatu distribusi *uniform* diskrit seperti berikut

```{r}
supp1 <- 1:8
prob1 <- rep(1/8, times = 8)
dist1 <- DiscreteDistribution(supp = supp1,
                              prob = prob1)
```

Kita bisa peroleh kembali *support* dan sebaran probabilitasnya seperti berikut

```{r}
support(dist1)
```

```{r}
prob(dist1)
```

Lihat sebarannya

```{r}
E(dist1)
```

```{r}
var(dist1)
```

```{r}
plot(dist1)
```

Misal diambil berbagai ukuran sampel dengan pengembalian

::: {.panel-tabset}

## Dengan `replicate`

```{r}
set.seed(211)
```

Sample size 3, 1000 kali percobaan

```{r}
sample_means <-
  replicate(
    1000,
    mean(
      sample(x = support(dist1),
             prob = prob(dist1),
             size = 3,
             replace = TRUE)))

hist(sample_means,
     main = "Sample Size of 3",
     xlab = "Sample Means")
```

Sample size 10, 1000 kali percobaan

```{r}
sample_means <-
  replicate(
    1000,
    mean(
      sample(x = support(dist1),
             prob = prob(dist1),
             size = 10,
             replace = TRUE)))

hist(sample_means,
     main = "Sample Size of 10",
     xlab = "Sample Means")
```

Sample size 50, 1000 kali percobaan

```{r}
sample_means <-
  replicate(
    1000,
    mean(
      sample(x = support(dist1),
             prob = prob(dist1),
             size = 50,
             replace = TRUE)))

hist(sample_means,
     main = "Sample Size of 50",
     xlab = "Sample Means")
```

## Dengan *for loop*

```{r}
set.seed(211)
```

Sample size 3, 1000 kali percobaan

```{r}
sample_means <- c( )
for (i in 1:1000) {
  sample_means[i] <-
    mean(
      sample(x = support(dist1),
             prob = prob(dist1),
             size = 3,
             replace = TRUE))
}

hist(sample_means,
     main = "Sample Size of 3",
     xlab = "Sample Means")
```

Sample size 10, 1000 kali percobaan

```{r}
sample_means <- c( )
for (i in 1:1000) {
  sample_means[i] <-
    mean(
      sample(x = support(dist1),
             prob = prob(dist1),
             size = 10,
             replace = TRUE))
}

hist(sample_means,
     main = "Sample Size of 10",
     xlab = "Sample Means")
```

:::

Sample size 50, 1000 kali percobaan

```{r}
sample_means <- c( )
for (i in 1:1000) {
  sample_means[i] <-
    mean(
      sample(x = support(dist1),
             prob = prob(dist1),
             size = 50,
             replace = TRUE))
}

hist(sample_means,
     main = "Sample Size of 50",
     xlab = "Sample Means")
```

:::

Jika dilihat berdasarkan histogram dari ketiga *sampling* tadi, bisa terlihat bahwa semakin besar ukuran sampelnya, maka distribusi *sample mean* akan semakin mendekati distribusi normal

## Dengan melihat semua kemungkinan

Daripada melakukan simulasi yang mengandalkan *random*, untuk ukuran sampel yang cukup kecil, kita bisa saja melihat semua kemungkinan pengambilan sampel, menghitung statistiknya (misalnya di sini statistik rata-rata), lalu menghitung probabilitasnya, untuk memperoleh distribusi *sampling* untuk statistik tersebut (misalnya di sini distribusi *sample mean*) secara eksak.

Kita akan meninjau semua kemungkinan pengambilan dua sampel dengan pengembalian. Untuk itu, kita memerlukan *package* `gtools` yang menyediakan fungsi-fungsi kombinatorik seperti `permutations` dan `combinations` untuk memperoleh semua kemungkinan seperti itu

```
install.packages("gtools")
```

```{r}
library("gtools")
```

Mari kita coba untuk distribusi diskrit berhingga, yang misalnya bisa kita buat sendiri, sebagai berikut:

```{r}
supp2 <- c(0, 1, 2, 3)
prob2 <- c(1/4, 1/4, 1/4, 1/4)
dist2 <- DiscreteDistribution(supp = supp2,
                              prob = prob2)
plot(dist2)
```

(Sebenarnya `dist2` ini juga bisa berupa distribusi Bernoulli, binomial, ataupun distribusi diskrit lainnya.)

Kita bisa menghasilkan semua kemungkinan sampel berukuran 2 dengan pengembalian, menggunakan fungsi `permutations` dari *package* `gtools`, sebagai berikut:

```{r}
mat2 <- permutations(n = length(support(dist2)),
                     r = 2, # ukuran sampel
                     v = support(dist2),
                     repeats.allowed = TRUE)
mat2
```

Hasilnya berupa matriks, yang bisa kita ubah jadi *data frame*,

```{r}
df_perm2 <- data.frame(mat2)
df_perm2
```

Kemudian, kita ingin menghitung rata-rata dari tiap kemungkinan dua sampel. Kita bisa *apply* atau menerapkan fungsi statistik yang kita inginkan, misalnya `mean` atau rata-rata, untuk tiap baris di matriks `mat2`, sebagai berikut

```{r}
apply(mat2, 1, mean)
```

Hasilnya bisa kita simpan sebagai kolom baru di *data frame*, misal kolom `Xbar`

```{r}
df_perm2["Xbar"] <- apply(mat2, 1, mean)
df_perm2
```

Sekarang, `df_perm2` menyimpan semua kemungkinan sampel berukuran 2 dengan pengembalian yang mungkin, disertai rata-rata masing-masing.

Selanjutnya, kita perlu menghitung probabilitas dari tiap kemungkinan sampel. Perhatikan bahwa, karena *sampling* dilakukan **dengan pengembalian**, probabilitas antar tiap pengambilan bersifat **independen**. Sehingga, kita tinggal mengalikan probabilitas untuk masing-masing pengambilan.

Caranya, kita bisa menghitung probabilitas masing-masing pengambilan (membuat matriks baru, misal `mat2_prob`), baru melakukan perkalian per baris.

Karena distribusi `dist2` tergolong diskrit, kita bisa menerapkan PMFnya yaitu fungsi `d`

```{r}
d(dist2)(mat2)
```

Waduh, hasilnya malah *flat*, daripada berbentuk matriks. Agar tetap berbentuk matriks, kita gunakan fungsi `apply` lagi, sebagai berikut

```{r}
mat2_prob <- apply(mat2, 1:2, d(dist2))
mat2_prob
```

Sekarang kita tinggal mengalikan tiap baris (dengan `apply` lagi), dan menyimpan hasilnya sebagai kolom baru di *data frame*, misal `prob`

```{r}
df_perm2["prob"] <- apply(mat2_prob, 1, prod)
df_perm2
```

Kini, tiap kemungkinan sampel berukuran 2 dengan pengembalian sudah disertai rata-rata dan probabilitas. Untuk memperoleh tabel (PMF untuk) distribusi *sample mean*, kita tinggal melakukan "pengelompokkan" data untuk tiap nilai statistiknya yaitu `Xbar` atau rata-rata, sembari menjumlahkan probabilitas. Caranya bisa dengan kode seperti berikut

```{r}
Xbar_prob2 <- aggregate(prob ~ Xbar,
                        data = df_perm2,
                        sum)
Xbar_prob2
```

`Xbar_prob2` adalah tabel PMF dari *sample mean*, yang telah diperoleh secara eksak. Mari kita visualisasikan distribusi *sample mean* tersebut menggunakan *histogram*, tetapi dengan fungsi `barplot` agar tiap nilai rata-rata memiliki bar tersendiri

```{r}
barplot(height = Xbar_prob2[["prob"]],
        names.arg = Xbar_prob2[["Xbar"]],
        ylim = c(0, 5/16),
        yaxp = c(0, 5/16, 5))
```

Whew! Perhatikan bahwa, untuk sampel berukuran 2, ternyata kemungkinannya cukup banyak. Lihat kembali dimensi dari `mat2` yaitu matriks berisi semua kemungkinan sampel berukuran 2 dengan pengembalian:

```{r}
dim(mat2)
```

Banyaknya baris bisa sampai 16 ini dihasilkan dari rumus banyaknya permutasi dengan pengulangan *(permutations with repitition)*, yaitu

$$n^r = 4^2 = 16$$

```{r}
4^2
```

Dengan 4 adalah ukuran *support* di distribusi asalnya, dan 2 adalah ukuran sampel. Ini masih contoh kecil.

Bayangkan apabila ukuran sampelnya besar. Maka banyaknya kemungkinan pengambilan menjadi amat sangat banyak. Terlalu banyak, sehingga lebih baik kita lakukan suatu penghampiran daripada langsung menghitung distribusi *sample mean* secara eksak.

Untuk itu, perhatikan dalil-dalil berikut.

## Dalil 1: Dengan Pengembalian

**Dalil 1**

Apabila sampel acak berukuran n diambil **dengan pengembalian** dari populasi berhingga yang berukuran $N$, dimana populasi tersebut mempunyai mean $\mu$ dan variansi $\sigma^2$ , maka untuk $n$ yang besar, distribusi dari mean sampel $\bar{X}$ akan mendekati distribusi normal dengan mean $\mu_\bar{X} = \mu$ dan $\sigma\bar{X}^2 = \frac{\sigma^2}{n}$. Dengan demikian $$Z = \frac{\bar{X} - \mu}{\frac{\sigma}{\sqrt{n}}} \; \text{mendekati} \; N(0,1)$$

Catatan: Dalil 1 berlaku untuk populasi berhingga dengan **ukuran sampel** $\mathbf{n \geq 30}$. Dalil 1 berlaku untuk $n < 30$ apabila distribusi dari populasinya tidak terlalu menyimpang dari distribusi normal.

**Contoh**

Misalkan diberikan populasi 1,1,1,3,4,5,6,6,6,7 dan misalkan diambil sampel acak berukuran 36 dari populasi tersebut dengan pengembalian. Tentukan probabilitas bahwa nilai rata-rata sampelnya antara 3.85 dan 4.45 !

```{r}
data1 <- c(1, 1, 1, 3, 4, 5, 6, 6, 6, 7,8,8)
```

Kita hitung statistiknya

```{r}
mean1 <- mean(data1)
sd1 <- sd(data1)
```

Sekarang kita hitung probabilitasnya

```{r}
n <- 36
probability <-
  pnorm(4.45,
        mean = mean1,
        sd = sd1/sqrt(n)) -
    pnorm(3.85,
          mean = mean1,
          sd = sd1/sqrt(n))
probability
```

Atau bisa kita ubah ke normal standar terlebih dahulu

```{r}
n <- 36
standard_error <- sd1 / sqrt(n)
lower_bound <- 3.85
upper_bound <- 4.45
z_lower <- (lower_bound - mean1) / standard_error
z_upper <- (upper_bound - mean1) / standard_error
probability <- pnorm(z_upper) - pnorm(z_lower)
probability
```

## Dalil 2: Tanpa Pengembalian

**Lalu bagaimana dengan tanpa pengembalian?** Misalkan kita punya suatu distribusi uniform

```{r}
unif2 <- c(1:50)
unif2
```

Lihat sebarannya

```{r}
mean(unif2)
```

```{r}
sd(unif2)
```

```{r}
hist(unif2, main = "Uniform Distribution", xlab = " ")
```

Sample size 30, 1000 kali percobaan

```{r}
sample_means <- c( )
for(i in 1:1000){
  sample_means[i] <- mean(sample(50, 30, replace = FALSE))
}
hist(sample_means, main = "Sample Size of 50", xlab = "Sample Means")
```

Dapat terlihat juga bahwa bentuk distribusinya mirip dengan distribusi normal! Akan tetapi, formula yang digunakannya berbeda, ingat dalil 2!

**Dalil 2** Apabila sampel acak berukuran n diambil secara acak **tanpa pengembalian** dari suatu populasi berhingga berukuran $N$, dimana populasi tersebut memiliki mean $\mu$ dan variansi $\sigma^2$, maka distribusi probabilitas $\bar{X}$ akan menghampiri normal dengan $\mu_\bar{X} = \mu$ dan $\sigma^2 = \frac{\sigma^2(N-n)}{n(N-1)}$

Catatan: lagi-lagi, ada syarat $n \geq 30$

Secara umum, jika sampel yang diambil sangat besar (yaitu $n \geq 30$) maka bisa digunakan **CLT** atau ***Central Limit Theorem***, juga disebut **Dalil Limit Pusat**

# *Central Limit Theorem* (CLT)

Semakin besar sampel yang diambil, distribusi *sample mean* makin mendekati distribusi normal $N(\mu, \sigma^2)$, dengan

$$\mu_\bar{X} \approx \mu$$

$$\sigma_\bar{X}^2 \approx \frac{\sigma^2}{n}$$

Bagaimanapun bentuk distribusi aslinya, apabila $n \geq 30$, distribusi normal di atas akan mendekati distribusi *sample mean* dengan sangat baik

## Contoh CLT: Menghitung CDF

Sebuah perusahaan memproduksi bohlam. Bila umur bohlam itu menyebar normal dengan mean 800 jam dan standar deviasi 40 jam, hitunglah peluang bahwa suatu sampel acak 16 bohlam akan mempunyai umur rata-rata kurang dari 775 jam.

Jawab: misalkan $X$ adalah variabel acak untuk umur bohlam. Diminta

$$\text{Pr}(X < 775)$$

yaitu nilai CDF di 775.

```{r}
n <- 16
mean2 <- 800
sd2 <- 40 / sqrt(n)
pnorm(775, mean = mean2, sd = sd2)
```

Atau jika ingin diubah ke dalam normal standar terlebih dahulu,

```{r}
x = (775-mean2) / sd2
pnorm(x) # otomatis mean=0, sd=1
```

## CLT untuk sembarang data

transformasi data random menjadi normal standar (berlaku untuk distribusi kontinu apapun -\> sampling dist.) gunakan CLT -\> scale

```{r}
set.seed(101)
n <- 100
random <- rnorm(n, mean = 10, sd = 8)
par(mfrow = c(1,2))
plot(density(random), main = "Sebelum")
plot(density(scale(random)), main = "Sesudah")
```

## Contoh CLT: Probabilitas di Interval

Misalkan diberikan populasi 1,1,1,3,4,5,6,6,6,7 dan misalkan diambil sampel acak berukuran 36 dari populasi tersebut dengan pengembalian. Tentukan probabilitas bahwa nilai rata-rata sampelnya antara 3.85 dan 4.45 !

```{r}
data1 <- c(1, 1, 1, 3, 4, 5, 6, 6, 6, 7)

mean1 <- mean(data1)
sd1 <- sd(data1)

n <- 36
standard_error <- sd1 / sqrt(n)

lower_bound <- 3.85
upper_bound <- 4.45
z_lower <- (lower_bound - mean1) / standard_error
z_upper <- (upper_bound - mean1) / standard_error

probability <- pnorm(z_upper) - pnorm(z_lower)
probability
```

# Distribusi-t

Distribusi-t digunakan saat $n < 30$ (sehingga tidak bisa menggunakan CLT) dan variansi populasi tidak diketahui (yang ada hanyalah variasi sampel, misal $S^2$), sesuai dalil 3 berikut

## Dalil 3: Distribusi-t

Apabila $\bar{x}$ dan $S^2$ masing-masing adalah nilai *mean* dan nilai variansi dari sampel berukuran $n$, yang diambil dari suatu populasi nrmal dengan mean $\mu$ (yang diketahui) dan variansi $\sigma^2$ (yang tidak diketahui), maka kita bisa misalkan

$$t = \frac{\bar{x} - \mu}{\left( \frac{S}{\sqrt{n}} \right)}$$

dan $t$ ini merupakan sebuah nilai dari variabel acak $T$ yang mempunyai distribusi $t$ dengan (parameter) **derajat bebas** $v = n-1$.

Distribusi-t adalah distribusi kontinu yang memiliki PDF dan CDF, sebagaimana distribusi kontinu pada umumnya, sehingga untuknya tersedia fungsi-fungsi `d`..., `p`..., `q`..., dan `r`... yang biasa kita kenal.

Distribusi-t memiliki satu parameter saja, yaitu ***degrees of freedom*** atau **derajat bebas**, yang dilambangkan `df` di R.

## PDF

```{r}
dt(x = 0.5, df = 14)
```

## CDF

```{r}
pt(0.025, df = 14) 
```

## *Quantile function*

Pr(T\<t)=0.05 (alpha) -\> nyari t nya (t-table)

```{r}
qt(.95, df = 20)
```

## RNG

```{r}
set.seed(121)
n <- 100
randomt <- rt(n, df = 20)

hist(randomt, breaks=50, xlim = c(-6, 4))
```

## Penerapan distribusi-t

**Contoh**

Tentukan nilai $k$ sedemikian sehingga

$$\text{Pr}(k < T < -1.761) = 0.045$$

dari suatu sampel acak berukuran 15 diambil dari suatu populasi normal

Jawab:

Sesuai Dalil 3, parameter derajat bebas yang digunakan adalah

$$v = n-1 = 15-1 = 14$$

```{r}
prob <- 0.045
atas <- pt(-1.716, df = 14)

bawah <- atas - prob
k <- qt(bawah, df = 14)
k
```

# Distribusi beda dua *mean*

Misalkan kita punya dua populasi (bisa sama ataupun berbeda), yang masing-masing dibuat distribusi *sample mean* nya, dan kita ingin melihat bagaimana selisih antara kedua distribusi tersebut. Secara tidak langsung, kita bisa melihat seberapa berbeda rata-rata antar kedua populasi, bagaimana persebaran bedanya.

Dalil 4 berikut adalah Dalil Limit Pusat yang telah disesuaikan untuk kasus dua populasi.

## Dalil 4: Beda Dua *Mean* Menghampiri Normal

Misalkan

- sampel acak berukuran $n_1$ diambil secara acak dari populasi berukuran besar (tak hingga), misal Populasi I, dengan *mean* $\mu_1$ dan variansi $\sigma_1^2$.

- sampel acak berukuran $n_2$ diambil secara acak dari populasi berukuran besar (tak hingga), misal Populasi II, dengan *mean* $\mu_2$ dan variansi $\sigma_2^2$.

- Populasi I dan Populasi II saling bebas.

Maka beda dua mean dari sampel, yaitu $\bar{X}_1 - \bar{X}_2$, akan menyebar menghampiri normal dengan *mean* $\mu_{\bar{X}_1 - \bar{X}_2} = \mu_1 - \mu_2$ dan variansi $\sigma_{\bar{X}_1 - \bar{X}_2}^2 = \frac{\sigma_1^2}{n_1} + \frac{\sigma_2^2}{n_2}$

Dengan demikian, misalkan

$$z= \frac{\left( \bar{x}_1 - \bar{x}_2 \right) - \left( \mu_1 - \mu_2 \right)}{\sqrt{\frac{\sigma_1^2}{n_1} + \frac{\sigma_2^2}{n_2}}}$$

maka $z$ merupakan nilai dari variabel acak normal standar $Z$.

Catatan:

- Distribusi tiap populasi tidak harus normal.

- Apabila $n_1 \geq 30$ dan $n_2 \geq 30$, maka distribusi $\bar{X}_1 - \bar{X}_2$ mendekati distribusi normal dengan sangat baik

## Contoh distribusi beda dua *mean*

**Contoh:**

Sebuah sampel acak berukuran $n_1 = 5$ diambil secara acak dari sebuah populasi yang menyebar normal dengan nilai *mean* $\mu_1 = 50$ dan $\sigma_1^2 = 9$ dan diperoleh nilai *mean sample* nya $\bar{x}_1$.

Sebuah sampel acak kedua berukuran $n_2 = 4$, bebas dengan sampel acak pertama, diambil dari populasi lain yang jaga menyebar normal dengan nilai *mean* $\mu_2 = 40$ dan $\sigma_1^2 = 4$ dan diperoleh nilai *mean sample* nya $\bar{x}_2$.

Hitung:

$$\text{Pr}\left( \left(\bar{X}_1 - \bar{X}_2\right) < 8.2 \right)$$

**Jawab:**

Karena Populasi I dan Populasi II berdistribusi normal, walaupun $n_1$ dan $n_2$ berukuran kecil, maka $\bar{X}_1 - \bar{X}_2$ juga berdistribusi normal.

(Kombinasi linear dari distribusi normal juga berupa distribusi normal.)

*Mean* dari $\bar{X}_1 - \bar{X}_2$ adalah:

$$\begin{align*}
\mu_{\bar{X}_1 - \bar{X}_2} &= \mu_1 - \mu_2 \\
                            &= 50 - 40 = 10
\end{align*}$$

dan variansinya adalah:

$$\begin{align*}
\sigma_{\bar{X}_1 - \bar{X}_2}^2 &= \frac{\sigma_1^2}{n_1} + \frac{\sigma_2^2}{n_2} \\
&= \frac{9}{5} + \frac{4}{4} &= 2.8
\end{align*}$$

Jadi,

$$\begin{align*}
\text{Pr}&\left( \left(\bar{X}_1 - \bar{X}_2\right) < 8.2 \right) \\
&= \text{Pr}\left( \frac{\left(\bar{X}_1 - \bar{X}_2\right) - 10}{\sqrt{2.8}} < \frac{8.2 - 10}{\sqrt{2.8}} \right) \\
&= \text{Pr}\left( Z < \frac{8.2 - 10}{\sqrt{2.8}} \right)
\end{align*}$$

```{r}
pnorm( (8.2-10)/sqrt(2.8) ) # otomatis mean=0, sd=1
```

Maka
$$\begin{align*}
\text{Pr}&\left( \left(\bar{X}_1 - \bar{X}_2\right) < 8.2 \right) \\
&= \text{Pr}\left( Z < \frac{8.2 - 10}{\sqrt{2.8}} \right) \\
&\approx 0.1410294
\end{align*}$$

Kesimpulannya,
$$\begin{align*}
\text{Pr}&\left( \left(\bar{X}_1 - \bar{X}_2\right) < 8.2 \right) \\
&\approx 0.1410294
\end{align*}$$
